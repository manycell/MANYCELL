/* soapbindingProxy.h
   Generated by gSOAP 2.7.15 from timecoursews.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapbindingProxy_H
#define soapbindingProxy_H
#include "soapH.h"
class binding
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'binding' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	binding()
	{ soap = soap_new(); endpoint = "http://localhost:8080/axis2/services/TimeCourseService"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://timecoursews.services.copasiws.copasi.org/types", NULL, NULL},
	{"ns1", "http://services.copasiws.copasi.org/timecoursews.wsdl", NULL, NULL},
	{"ns3", "http://copasi.org/copasiws/schemas", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~binding() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'runDeterministicSimulator' of service 'binding' and return error code (or SOAP_OK)
	virtual int __ns1__runDeterministicSimulator(_ns2__RunDeterministicSimulator *ns2__RunDeterministicSimulator, _ns2__RunDeterministicSimulatorResponse *ns2__RunDeterministicSimulatorResponse) { return soap ? soap_call___ns1__runDeterministicSimulator(soap, endpoint, NULL, ns2__RunDeterministicSimulator, ns2__RunDeterministicSimulatorResponse) : SOAP_EOM; };
	/// Invoke 'startDeterministicSimulator' of service 'binding' and return error code (or SOAP_OK)
	virtual int __ns1__startDeterministicSimulator(_ns2__StartDeterministicSimulator *ns2__StartDeterministicSimulator, _ns2__StartDeterministicSimulatorResponse *ns2__StartDeterministicSimulatorResponse) { return soap ? soap_call___ns1__startDeterministicSimulator(soap, endpoint, NULL, ns2__StartDeterministicSimulator, ns2__StartDeterministicSimulatorResponse) : SOAP_EOM; };
	/// Invoke 'getSimulatorStatus' of service 'binding' and return error code (or SOAP_OK)
	virtual int __ns1__getSimulatorStatus(_ns3__GetSimulatorStatus *ns3__GetSimulatorStatus, _ns3__GetSimulatorStatusResponse *ns3__GetSimulatorStatusResponse) { return soap ? soap_call___ns1__getSimulatorStatus(soap, endpoint, NULL, ns3__GetSimulatorStatus, ns3__GetSimulatorStatusResponse) : SOAP_EOM; };
	/// Invoke 'getResult' of service 'binding' and return error code (or SOAP_OK)
	virtual int __ns1__getResult(_ns3__GetResult *ns3__GetResult, _ns3__GetResultResponse *ns3__GetResultResponse) { return soap ? soap_call___ns1__getResult(soap, endpoint, NULL, ns3__GetResult, ns3__GetResultResponse) : SOAP_EOM; };
	/// Invoke 'deleteSimulationResource' of service 'binding' and return error code (or SOAP_OK)
	virtual int __ns1__deleteSimulationResource(_ns3__DeleteSimulationResource *ns3__DeleteSimulationResource, _ns3__DeleteSimulationResourceResponse *ns3__DeleteSimulationResourceResponse) { return soap ? soap_call___ns1__deleteSimulationResource(soap, endpoint, NULL, ns3__DeleteSimulationResource, ns3__DeleteSimulationResourceResponse) : SOAP_EOM; };
};
#endif
