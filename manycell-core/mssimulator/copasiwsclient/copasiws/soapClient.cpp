/* soapClient.cpp
   Generated by gSOAP 2.7.15 from timecoursews.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.15 2011-01-27 11:57:39 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__runDeterministicSimulator(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__RunDeterministicSimulator *ns2__RunDeterministicSimulator, _ns2__RunDeterministicSimulatorResponse *ns2__RunDeterministicSimulatorResponse)
{	struct __ns1__runDeterministicSimulator soap_tmp___ns1__runDeterministicSimulator;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/axis2/services/TimeCourseService";
	if (!soap_action)
		soap_action = "RunDeterministicSimulator";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__runDeterministicSimulator.ns2__RunDeterministicSimulator = ns2__RunDeterministicSimulator;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__runDeterministicSimulator(soap, &soap_tmp___ns1__runDeterministicSimulator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__runDeterministicSimulator(soap, &soap_tmp___ns1__runDeterministicSimulator, "-ns1:runDeterministicSimulator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__runDeterministicSimulator(soap, &soap_tmp___ns1__runDeterministicSimulator, "-ns1:runDeterministicSimulator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__RunDeterministicSimulatorResponse)
		return soap_closesock(soap);
	ns2__RunDeterministicSimulatorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__RunDeterministicSimulatorResponse->soap_get(soap, "ns2:RunDeterministicSimulatorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startDeterministicSimulator(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__StartDeterministicSimulator *ns2__StartDeterministicSimulator, _ns2__StartDeterministicSimulatorResponse *ns2__StartDeterministicSimulatorResponse)
{	struct __ns1__startDeterministicSimulator soap_tmp___ns1__startDeterministicSimulator;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/axis2/services/TimeCourseService";
	if (!soap_action)
		soap_action = "StartDeterministicSimulator";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__startDeterministicSimulator.ns2__StartDeterministicSimulator = ns2__StartDeterministicSimulator;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__startDeterministicSimulator(soap, &soap_tmp___ns1__startDeterministicSimulator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__startDeterministicSimulator(soap, &soap_tmp___ns1__startDeterministicSimulator, "-ns1:startDeterministicSimulator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__startDeterministicSimulator(soap, &soap_tmp___ns1__startDeterministicSimulator, "-ns1:startDeterministicSimulator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__StartDeterministicSimulatorResponse)
		return soap_closesock(soap);
	ns2__StartDeterministicSimulatorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__StartDeterministicSimulatorResponse->soap_get(soap, "ns2:StartDeterministicSimulatorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSimulatorStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetSimulatorStatus *ns3__GetSimulatorStatus, _ns3__GetSimulatorStatusResponse *ns3__GetSimulatorStatusResponse)
{	struct __ns1__getSimulatorStatus soap_tmp___ns1__getSimulatorStatus;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/axis2/services/TimeCourseService";
	if (!soap_action)
		soap_action = "GetSimulatorStatus";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getSimulatorStatus.ns3__GetSimulatorStatus = ns3__GetSimulatorStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getSimulatorStatus(soap, &soap_tmp___ns1__getSimulatorStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getSimulatorStatus(soap, &soap_tmp___ns1__getSimulatorStatus, "-ns1:getSimulatorStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getSimulatorStatus(soap, &soap_tmp___ns1__getSimulatorStatus, "-ns1:getSimulatorStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetSimulatorStatusResponse)
		return soap_closesock(soap);
	ns3__GetSimulatorStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetSimulatorStatusResponse->soap_get(soap, "ns3:GetSimulatorStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetResult *ns3__GetResult, _ns3__GetResultResponse *ns3__GetResultResponse)
{	struct __ns1__getResult soap_tmp___ns1__getResult;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/axis2/services/TimeCourseService";
	if (!soap_action)
		soap_action = "GetResult";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getResult.ns3__GetResult = ns3__GetResult;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getResult(soap, &soap_tmp___ns1__getResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getResult(soap, &soap_tmp___ns1__getResult, "-ns1:getResult", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getResult(soap, &soap_tmp___ns1__getResult, "-ns1:getResult", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetResultResponse)
		return soap_closesock(soap);
	ns3__GetResultResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetResultResponse->soap_get(soap, "ns3:GetResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteSimulationResource(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DeleteSimulationResource *ns3__DeleteSimulationResource, _ns3__DeleteSimulationResourceResponse *ns3__DeleteSimulationResourceResponse)
{	struct __ns1__deleteSimulationResource soap_tmp___ns1__deleteSimulationResource;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/axis2/services/TimeCourseService";
	if (!soap_action)
		soap_action = "DeleteSimulationResource";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteSimulationResource.ns3__DeleteSimulationResource = ns3__DeleteSimulationResource;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteSimulationResource(soap, &soap_tmp___ns1__deleteSimulationResource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteSimulationResource(soap, &soap_tmp___ns1__deleteSimulationResource, "-ns1:deleteSimulationResource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteSimulationResource(soap, &soap_tmp___ns1__deleteSimulationResource, "-ns1:deleteSimulationResource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DeleteSimulationResourceResponse)
		return soap_closesock(soap);
	ns3__DeleteSimulationResourceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DeleteSimulationResourceResponse->soap_get(soap, "ns3:DeleteSimulationResourceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
