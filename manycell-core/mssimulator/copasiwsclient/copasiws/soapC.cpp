/* soapC.cpp
   Generated by gSOAP 2.7.15 from timecoursews.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.15 2011-01-27 11:57:39 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE__ns3__OutputResult_format:
		return soap_in__ns3__OutputResult_format(soap, NULL, NULL, "ns3:OutputResult-format");
	case SOAP_TYPE__ns2__DeterministicParameters_outputFormat:
		return soap_in__ns2__DeterministicParameters_outputFormat(soap, NULL, NULL, "ns2:DeterministicParameters-outputFormat");
	case SOAP_TYPE__ns2__DeterministicParameters_inputFormat:
		return soap_in__ns2__DeterministicParameters_inputFormat(soap, NULL, NULL, "ns2:DeterministicParameters-inputFormat");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns3__StatusCode:
		return soap_in_ns3__StatusCode(soap, NULL, NULL, "ns3:StatusCode");
	case SOAP_TYPE_ns2__Variable:
		return soap_in_ns2__Variable(soap, NULL, NULL, "ns2:Variable");
	case SOAP_TYPE_ns2__Function:
		return soap_in_ns2__Function(soap, NULL, NULL, "ns2:Function");
	case SOAP_TYPE_ns3__OutputResult:
		return soap_in_ns3__OutputResult(soap, NULL, NULL, "ns3:OutputResult");
	case SOAP_TYPE_ns3__User:
		return soap_in_ns3__User(soap, NULL, NULL, "ns3:User");
	case SOAP_TYPE_ns3__Transaction:
		return soap_in_ns3__Transaction(soap, NULL, NULL, "ns3:Transaction");
	case SOAP_TYPE_ns3__Status:
		return soap_in_ns3__Status(soap, NULL, NULL, "ns3:Status");
	case SOAP_TYPE_ns2__SensitivityParameters:
		return soap_in_ns2__SensitivityParameters(soap, NULL, NULL, "ns2:SensitivityParameters");
	case SOAP_TYPE_ns2__DeterministicParameters:
		return soap_in_ns2__DeterministicParameters(soap, NULL, NULL, "ns2:DeterministicParameters");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns3__DeleteSimulationResourceResponse:
		return soap_in_PointerTo_ns3__DeleteSimulationResourceResponse(soap, NULL, NULL, "ns3:DeleteSimulationResourceResponse");
	case SOAP_TYPE_PointerTo_ns3__DeleteSimulationResource:
		return soap_in_PointerTo_ns3__DeleteSimulationResource(soap, NULL, NULL, "ns3:DeleteSimulationResource");
	case SOAP_TYPE_PointerTo_ns3__GetResultResponse:
		return soap_in_PointerTo_ns3__GetResultResponse(soap, NULL, NULL, "ns3:GetResultResponse");
	case SOAP_TYPE_PointerTo_ns3__GetResult:
		return soap_in_PointerTo_ns3__GetResult(soap, NULL, NULL, "ns3:GetResult");
	case SOAP_TYPE_PointerTo_ns3__GetSimulatorStatusResponse:
		return soap_in_PointerTo_ns3__GetSimulatorStatusResponse(soap, NULL, NULL, "ns3:GetSimulatorStatusResponse");
	case SOAP_TYPE_PointerTo_ns3__GetSimulatorStatus:
		return soap_in_PointerTo_ns3__GetSimulatorStatus(soap, NULL, NULL, "ns3:GetSimulatorStatus");
	case SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulatorResponse:
		return soap_in_PointerTo_ns2__StartDeterministicSimulatorResponse(soap, NULL, NULL, "ns2:StartDeterministicSimulatorResponse");
	case SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulator:
		return soap_in_PointerTo_ns2__StartDeterministicSimulator(soap, NULL, NULL, "ns2:StartDeterministicSimulator");
	case SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulatorResponse:
		return soap_in_PointerTo_ns2__RunDeterministicSimulatorResponse(soap, NULL, NULL, "ns2:RunDeterministicSimulatorResponse");
	case SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulator:
		return soap_in_PointerTo_ns2__RunDeterministicSimulator(soap, NULL, NULL, "ns2:RunDeterministicSimulator");
	case SOAP_TYPE_PointerTo_ns3__ServiceFault:
		return soap_in_PointerTo_ns3__ServiceFault(soap, NULL, NULL, "ns3:ServiceFault");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons3__Status:
		return soap_in_PointerTons3__Status(soap, NULL, NULL, "ns3:Status");
	case SOAP_TYPE_PointerTons3__User:
		return soap_in_PointerTons3__User(soap, NULL, NULL, "ns3:User");
	case SOAP_TYPE_PointerTons3__OutputResult:
		return soap_in_PointerTons3__OutputResult(soap, NULL, NULL, "ns3:OutputResult");
	case SOAP_TYPE_PointerTons2__DeterministicParameters:
		return soap_in_PointerTons2__DeterministicParameters(soap, NULL, NULL, "ns2:DeterministicParameters");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons2__SensitivityParameters:
		return soap_in_PointerTons2__SensitivityParameters(soap, NULL, NULL, "ns2:SensitivityParameters");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:OutputResult"))
		{	*type = SOAP_TYPE_ns3__OutputResult;
			return soap_in_ns3__OutputResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:User"))
		{	*type = SOAP_TYPE_ns3__User;
			return soap_in_ns3__User(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Transaction"))
		{	*type = SOAP_TYPE_ns3__Transaction;
			return soap_in_ns3__Transaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Status"))
		{	*type = SOAP_TYPE_ns3__Status;
			return soap_in_ns3__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SensitivityParameters"))
		{	*type = SOAP_TYPE_ns2__SensitivityParameters;
			return soap_in_ns2__SensitivityParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:DeterministicParameters"))
		{	*type = SOAP_TYPE_ns2__DeterministicParameters;
			return soap_in_ns2__DeterministicParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger;
			return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:OutputResult-format"))
		{	*type = SOAP_TYPE__ns3__OutputResult_format;
			return soap_in__ns3__OutputResult_format(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:DeterministicParameters-outputFormat"))
		{	*type = SOAP_TYPE__ns2__DeterministicParameters_outputFormat;
			return soap_in__ns2__DeterministicParameters_outputFormat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:DeterministicParameters-inputFormat"))
		{	*type = SOAP_TYPE__ns2__DeterministicParameters_inputFormat;
			return soap_in__ns2__DeterministicParameters_inputFormat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:StatusCode"))
		{	*type = SOAP_TYPE_ns3__StatusCode;
			return soap_in_ns3__StatusCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Variable"))
		{	*type = SOAP_TYPE_ns2__Variable;
			return soap_in_ns2__Variable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Function"))
		{	*type = SOAP_TYPE_ns2__Function;
			return soap_in_ns2__Function(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:ResourceProperty"))
		{	*type = SOAP_TYPE__ns3__ResourceProperty;
			return soap_in__ns3__ResourceProperty(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ServiceFault"))
		{	*type = SOAP_TYPE__ns3__ServiceFault;
			return soap_in__ns3__ServiceFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:DeleteSimulationResourceResponse"))
		{	*type = SOAP_TYPE__ns3__DeleteSimulationResourceResponse;
			return soap_in__ns3__DeleteSimulationResourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:DeleteSimulationResource"))
		{	*type = SOAP_TYPE__ns3__DeleteSimulationResource;
			return soap_in__ns3__DeleteSimulationResource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetResultResponse"))
		{	*type = SOAP_TYPE__ns3__GetResultResponse;
			return soap_in__ns3__GetResultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetResult"))
		{	*type = SOAP_TYPE__ns3__GetResult;
			return soap_in__ns3__GetResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetSimulatorStatusResponse"))
		{	*type = SOAP_TYPE__ns3__GetSimulatorStatusResponse;
			return soap_in__ns3__GetSimulatorStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetSimulatorStatus"))
		{	*type = SOAP_TYPE__ns3__GetSimulatorStatus;
			return soap_in__ns3__GetSimulatorStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:StartDeterministicSimulatorResponse"))
		{	*type = SOAP_TYPE__ns2__StartDeterministicSimulatorResponse;
			return soap_in__ns2__StartDeterministicSimulatorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:StartDeterministicSimulator"))
		{	*type = SOAP_TYPE__ns2__StartDeterministicSimulator;
			return soap_in__ns2__StartDeterministicSimulator(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RunDeterministicSimulatorResponse"))
		{	*type = SOAP_TYPE__ns2__RunDeterministicSimulatorResponse;
			return soap_in__ns2__RunDeterministicSimulatorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RunDeterministicSimulator"))
		{	*type = SOAP_TYPE__ns2__RunDeterministicSimulator;
			return soap_in__ns2__RunDeterministicSimulator(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE__ns3__OutputResult_format:
		return soap_out__ns3__OutputResult_format(soap, tag, id, (const enum _ns3__OutputResult_format *)ptr, "ns3:OutputResult-format");
	case SOAP_TYPE__ns2__DeterministicParameters_outputFormat:
		return soap_out__ns2__DeterministicParameters_outputFormat(soap, tag, id, (const enum _ns2__DeterministicParameters_outputFormat *)ptr, "ns2:DeterministicParameters-outputFormat");
	case SOAP_TYPE__ns2__DeterministicParameters_inputFormat:
		return soap_out__ns2__DeterministicParameters_inputFormat(soap, tag, id, (const enum _ns2__DeterministicParameters_inputFormat *)ptr, "ns2:DeterministicParameters-inputFormat");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns3__StatusCode:
		return soap_out_ns3__StatusCode(soap, tag, id, (const enum ns3__StatusCode *)ptr, "ns3:StatusCode");
	case SOAP_TYPE_ns2__Variable:
		return soap_out_ns2__Variable(soap, tag, id, (const enum ns2__Variable *)ptr, "ns2:Variable");
	case SOAP_TYPE_ns2__Function:
		return soap_out_ns2__Function(soap, tag, id, (const enum ns2__Function *)ptr, "ns2:Function");
	case SOAP_TYPE__ns3__ResourceProperty:
		return ((_ns3__ResourceProperty *)ptr)->soap_out(soap, "ns3:ResourceProperty", id, NULL);
	case SOAP_TYPE__ns3__ServiceFault:
		return ((_ns3__ServiceFault *)ptr)->soap_out(soap, "ns3:ServiceFault", id, NULL);
	case SOAP_TYPE__ns3__DeleteSimulationResourceResponse:
		return ((_ns3__DeleteSimulationResourceResponse *)ptr)->soap_out(soap, "ns3:DeleteSimulationResourceResponse", id, NULL);
	case SOAP_TYPE__ns3__DeleteSimulationResource:
		return ((_ns3__DeleteSimulationResource *)ptr)->soap_out(soap, "ns3:DeleteSimulationResource", id, NULL);
	case SOAP_TYPE__ns3__GetResultResponse:
		return ((_ns3__GetResultResponse *)ptr)->soap_out(soap, "ns3:GetResultResponse", id, NULL);
	case SOAP_TYPE__ns3__GetResult:
		return ((_ns3__GetResult *)ptr)->soap_out(soap, "ns3:GetResult", id, NULL);
	case SOAP_TYPE__ns3__GetSimulatorStatusResponse:
		return ((_ns3__GetSimulatorStatusResponse *)ptr)->soap_out(soap, "ns3:GetSimulatorStatusResponse", id, NULL);
	case SOAP_TYPE__ns3__GetSimulatorStatus:
		return ((_ns3__GetSimulatorStatus *)ptr)->soap_out(soap, "ns3:GetSimulatorStatus", id, NULL);
	case SOAP_TYPE_ns3__OutputResult:
		return ((ns3__OutputResult *)ptr)->soap_out(soap, tag, id, "ns3:OutputResult");
	case SOAP_TYPE_ns3__User:
		return ((ns3__User *)ptr)->soap_out(soap, tag, id, "ns3:User");
	case SOAP_TYPE_ns3__Transaction:
		return ((ns3__Transaction *)ptr)->soap_out(soap, tag, id, "ns3:Transaction");
	case SOAP_TYPE_ns3__Status:
		return ((ns3__Status *)ptr)->soap_out(soap, tag, id, "ns3:Status");
	case SOAP_TYPE__ns2__StartDeterministicSimulatorResponse:
		return ((_ns2__StartDeterministicSimulatorResponse *)ptr)->soap_out(soap, "ns2:StartDeterministicSimulatorResponse", id, NULL);
	case SOAP_TYPE__ns2__StartDeterministicSimulator:
		return ((_ns2__StartDeterministicSimulator *)ptr)->soap_out(soap, "ns2:StartDeterministicSimulator", id, NULL);
	case SOAP_TYPE__ns2__RunDeterministicSimulatorResponse:
		return ((_ns2__RunDeterministicSimulatorResponse *)ptr)->soap_out(soap, "ns2:RunDeterministicSimulatorResponse", id, NULL);
	case SOAP_TYPE__ns2__RunDeterministicSimulator:
		return ((_ns2__RunDeterministicSimulator *)ptr)->soap_out(soap, "ns2:RunDeterministicSimulator", id, NULL);
	case SOAP_TYPE_ns2__SensitivityParameters:
		return ((ns2__SensitivityParameters *)ptr)->soap_out(soap, tag, id, "ns2:SensitivityParameters");
	case SOAP_TYPE_ns2__DeterministicParameters:
		return ((ns2__DeterministicParameters *)ptr)->soap_out(soap, tag, id, "ns2:DeterministicParameters");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_out_xsd__nonNegativeInteger(soap, tag, id, (const std::string *)ptr, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns3__DeleteSimulationResourceResponse:
		return soap_out_PointerTo_ns3__DeleteSimulationResourceResponse(soap, tag, id, (_ns3__DeleteSimulationResourceResponse *const*)ptr, "ns3:DeleteSimulationResourceResponse");
	case SOAP_TYPE_PointerTo_ns3__DeleteSimulationResource:
		return soap_out_PointerTo_ns3__DeleteSimulationResource(soap, tag, id, (_ns3__DeleteSimulationResource *const*)ptr, "ns3:DeleteSimulationResource");
	case SOAP_TYPE_PointerTo_ns3__GetResultResponse:
		return soap_out_PointerTo_ns3__GetResultResponse(soap, tag, id, (_ns3__GetResultResponse *const*)ptr, "ns3:GetResultResponse");
	case SOAP_TYPE_PointerTo_ns3__GetResult:
		return soap_out_PointerTo_ns3__GetResult(soap, tag, id, (_ns3__GetResult *const*)ptr, "ns3:GetResult");
	case SOAP_TYPE_PointerTo_ns3__GetSimulatorStatusResponse:
		return soap_out_PointerTo_ns3__GetSimulatorStatusResponse(soap, tag, id, (_ns3__GetSimulatorStatusResponse *const*)ptr, "ns3:GetSimulatorStatusResponse");
	case SOAP_TYPE_PointerTo_ns3__GetSimulatorStatus:
		return soap_out_PointerTo_ns3__GetSimulatorStatus(soap, tag, id, (_ns3__GetSimulatorStatus *const*)ptr, "ns3:GetSimulatorStatus");
	case SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulatorResponse:
		return soap_out_PointerTo_ns2__StartDeterministicSimulatorResponse(soap, tag, id, (_ns2__StartDeterministicSimulatorResponse *const*)ptr, "ns2:StartDeterministicSimulatorResponse");
	case SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulator:
		return soap_out_PointerTo_ns2__StartDeterministicSimulator(soap, tag, id, (_ns2__StartDeterministicSimulator *const*)ptr, "ns2:StartDeterministicSimulator");
	case SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulatorResponse:
		return soap_out_PointerTo_ns2__RunDeterministicSimulatorResponse(soap, tag, id, (_ns2__RunDeterministicSimulatorResponse *const*)ptr, "ns2:RunDeterministicSimulatorResponse");
	case SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulator:
		return soap_out_PointerTo_ns2__RunDeterministicSimulator(soap, tag, id, (_ns2__RunDeterministicSimulator *const*)ptr, "ns2:RunDeterministicSimulator");
	case SOAP_TYPE_PointerTo_ns3__ServiceFault:
		return soap_out_PointerTo_ns3__ServiceFault(soap, tag, id, (_ns3__ServiceFault *const*)ptr, "ns3:ServiceFault");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons3__Status:
		return soap_out_PointerTons3__Status(soap, tag, id, (ns3__Status *const*)ptr, "ns3:Status");
	case SOAP_TYPE_PointerTons3__User:
		return soap_out_PointerTons3__User(soap, tag, id, (ns3__User *const*)ptr, "ns3:User");
	case SOAP_TYPE_PointerTons3__OutputResult:
		return soap_out_PointerTons3__OutputResult(soap, tag, id, (ns3__OutputResult *const*)ptr, "ns3:OutputResult");
	case SOAP_TYPE_PointerTons2__DeterministicParameters:
		return soap_out_PointerTons2__DeterministicParameters(soap, tag, id, (ns2__DeterministicParameters *const*)ptr, "ns2:DeterministicParameters");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons2__SensitivityParameters:
		return soap_out_PointerTons2__SensitivityParameters(soap, tag, id, (ns2__SensitivityParameters *const*)ptr, "ns2:SensitivityParameters");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns3__ResourceProperty:
		((_ns3__ResourceProperty *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__ServiceFault:
		((_ns3__ServiceFault *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__DeleteSimulationResourceResponse:
		((_ns3__DeleteSimulationResourceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__DeleteSimulationResource:
		((_ns3__DeleteSimulationResource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetResultResponse:
		((_ns3__GetResultResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetResult:
		((_ns3__GetResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetSimulatorStatusResponse:
		((_ns3__GetSimulatorStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetSimulatorStatus:
		((_ns3__GetSimulatorStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__OutputResult:
		((ns3__OutputResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__User:
		((ns3__User *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__Transaction:
		((ns3__Transaction *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__Status:
		((ns3__Status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__StartDeterministicSimulatorResponse:
		((_ns2__StartDeterministicSimulatorResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__StartDeterministicSimulator:
		((_ns2__StartDeterministicSimulator *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__RunDeterministicSimulatorResponse:
		((_ns2__RunDeterministicSimulatorResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__RunDeterministicSimulator:
		((_ns2__RunDeterministicSimulator *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__SensitivityParameters:
		((ns2__SensitivityParameters *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__DeterministicParameters:
		((ns2__DeterministicParameters *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		soap_serialize_xsd__nonNegativeInteger(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteSimulationResource:
		soap_serialize___ns1__deleteSimulationResource(soap, (const struct __ns1__deleteSimulationResource *)ptr);
		break;
	case SOAP_TYPE___ns1__getResult:
		soap_serialize___ns1__getResult(soap, (const struct __ns1__getResult *)ptr);
		break;
	case SOAP_TYPE___ns1__getSimulatorStatus:
		soap_serialize___ns1__getSimulatorStatus(soap, (const struct __ns1__getSimulatorStatus *)ptr);
		break;
	case SOAP_TYPE___ns1__startDeterministicSimulator:
		soap_serialize___ns1__startDeterministicSimulator(soap, (const struct __ns1__startDeterministicSimulator *)ptr);
		break;
	case SOAP_TYPE___ns1__runDeterministicSimulator:
		soap_serialize___ns1__runDeterministicSimulator(soap, (const struct __ns1__runDeterministicSimulator *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__DeleteSimulationResourceResponse:
		soap_serialize_PointerTo_ns3__DeleteSimulationResourceResponse(soap, (_ns3__DeleteSimulationResourceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__DeleteSimulationResource:
		soap_serialize_PointerTo_ns3__DeleteSimulationResource(soap, (_ns3__DeleteSimulationResource *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetResultResponse:
		soap_serialize_PointerTo_ns3__GetResultResponse(soap, (_ns3__GetResultResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetResult:
		soap_serialize_PointerTo_ns3__GetResult(soap, (_ns3__GetResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetSimulatorStatusResponse:
		soap_serialize_PointerTo_ns3__GetSimulatorStatusResponse(soap, (_ns3__GetSimulatorStatusResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetSimulatorStatus:
		soap_serialize_PointerTo_ns3__GetSimulatorStatus(soap, (_ns3__GetSimulatorStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulatorResponse:
		soap_serialize_PointerTo_ns2__StartDeterministicSimulatorResponse(soap, (_ns2__StartDeterministicSimulatorResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulator:
		soap_serialize_PointerTo_ns2__StartDeterministicSimulator(soap, (_ns2__StartDeterministicSimulator *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulatorResponse:
		soap_serialize_PointerTo_ns2__RunDeterministicSimulatorResponse(soap, (_ns2__RunDeterministicSimulatorResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulator:
		soap_serialize_PointerTo_ns2__RunDeterministicSimulator(soap, (_ns2__RunDeterministicSimulator *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__ServiceFault:
		soap_serialize_PointerTo_ns3__ServiceFault(soap, (_ns3__ServiceFault *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__Status:
		soap_serialize_PointerTons3__Status(soap, (ns3__Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__User:
		soap_serialize_PointerTons3__User(soap, (ns3__User *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__OutputResult:
		soap_serialize_PointerTons3__OutputResult(soap, (ns3__OutputResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__DeterministicParameters:
		soap_serialize_PointerTons2__DeterministicParameters(soap, (ns2__DeterministicParameters *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__SensitivityParameters:
		soap_serialize_PointerTons2__SensitivityParameters(soap, (ns2__SensitivityParameters *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__DeterministicParameters:
		return (void*)soap_instantiate_ns2__DeterministicParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SensitivityParameters:
		return (void*)soap_instantiate_ns2__SensitivityParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__RunDeterministicSimulator:
		return (void*)soap_instantiate__ns2__RunDeterministicSimulator(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__RunDeterministicSimulatorResponse:
		return (void*)soap_instantiate__ns2__RunDeterministicSimulatorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__StartDeterministicSimulator:
		return (void*)soap_instantiate__ns2__StartDeterministicSimulator(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__StartDeterministicSimulatorResponse:
		return (void*)soap_instantiate__ns2__StartDeterministicSimulatorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__Status:
		return (void*)soap_instantiate_ns3__Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__Transaction:
		return (void*)soap_instantiate_ns3__Transaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__User:
		return (void*)soap_instantiate_ns3__User(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__OutputResult:
		return (void*)soap_instantiate_ns3__OutputResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetSimulatorStatus:
		return (void*)soap_instantiate__ns3__GetSimulatorStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetSimulatorStatusResponse:
		return (void*)soap_instantiate__ns3__GetSimulatorStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetResult:
		return (void*)soap_instantiate__ns3__GetResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetResultResponse:
		return (void*)soap_instantiate__ns3__GetResultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__DeleteSimulationResource:
		return (void*)soap_instantiate__ns3__DeleteSimulationResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__DeleteSimulationResourceResponse:
		return (void*)soap_instantiate__ns3__DeleteSimulationResourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__ServiceFault:
		return (void*)soap_instantiate__ns3__ServiceFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__ResourceProperty:
		return (void*)soap_instantiate__ns3__ResourceProperty(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns1__runDeterministicSimulator:
		return (void*)soap_instantiate___ns1__runDeterministicSimulator(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__startDeterministicSimulator:
		return (void*)soap_instantiate___ns1__startDeterministicSimulator(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSimulatorStatus:
		return (void*)soap_instantiate___ns1__getSimulatorStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getResult:
		return (void*)soap_instantiate___ns1__getResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__deleteSimulationResource:
		return (void*)soap_instantiate___ns1__deleteSimulationResource(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return (void*)soap_instantiate_xsd__nonNegativeInteger(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns2__DeterministicParameters:
		if (p->size < 0)
			delete (ns2__DeterministicParameters*)p->ptr;
		else
			delete[] (ns2__DeterministicParameters*)p->ptr;
		break;
	case SOAP_TYPE_ns2__SensitivityParameters:
		if (p->size < 0)
			delete (ns2__SensitivityParameters*)p->ptr;
		else
			delete[] (ns2__SensitivityParameters*)p->ptr;
		break;
	case SOAP_TYPE__ns2__RunDeterministicSimulator:
		if (p->size < 0)
			delete (_ns2__RunDeterministicSimulator*)p->ptr;
		else
			delete[] (_ns2__RunDeterministicSimulator*)p->ptr;
		break;
	case SOAP_TYPE__ns2__RunDeterministicSimulatorResponse:
		if (p->size < 0)
			delete (_ns2__RunDeterministicSimulatorResponse*)p->ptr;
		else
			delete[] (_ns2__RunDeterministicSimulatorResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns2__StartDeterministicSimulator:
		if (p->size < 0)
			delete (_ns2__StartDeterministicSimulator*)p->ptr;
		else
			delete[] (_ns2__StartDeterministicSimulator*)p->ptr;
		break;
	case SOAP_TYPE__ns2__StartDeterministicSimulatorResponse:
		if (p->size < 0)
			delete (_ns2__StartDeterministicSimulatorResponse*)p->ptr;
		else
			delete[] (_ns2__StartDeterministicSimulatorResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns3__Status:
		if (p->size < 0)
			delete (ns3__Status*)p->ptr;
		else
			delete[] (ns3__Status*)p->ptr;
		break;
	case SOAP_TYPE_ns3__Transaction:
		if (p->size < 0)
			delete (ns3__Transaction*)p->ptr;
		else
			delete[] (ns3__Transaction*)p->ptr;
		break;
	case SOAP_TYPE_ns3__User:
		if (p->size < 0)
			delete (ns3__User*)p->ptr;
		else
			delete[] (ns3__User*)p->ptr;
		break;
	case SOAP_TYPE_ns3__OutputResult:
		if (p->size < 0)
			delete (ns3__OutputResult*)p->ptr;
		else
			delete[] (ns3__OutputResult*)p->ptr;
		break;
	case SOAP_TYPE__ns3__GetSimulatorStatus:
		if (p->size < 0)
			delete (_ns3__GetSimulatorStatus*)p->ptr;
		else
			delete[] (_ns3__GetSimulatorStatus*)p->ptr;
		break;
	case SOAP_TYPE__ns3__GetSimulatorStatusResponse:
		if (p->size < 0)
			delete (_ns3__GetSimulatorStatusResponse*)p->ptr;
		else
			delete[] (_ns3__GetSimulatorStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns3__GetResult:
		if (p->size < 0)
			delete (_ns3__GetResult*)p->ptr;
		else
			delete[] (_ns3__GetResult*)p->ptr;
		break;
	case SOAP_TYPE__ns3__GetResultResponse:
		if (p->size < 0)
			delete (_ns3__GetResultResponse*)p->ptr;
		else
			delete[] (_ns3__GetResultResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns3__DeleteSimulationResource:
		if (p->size < 0)
			delete (_ns3__DeleteSimulationResource*)p->ptr;
		else
			delete[] (_ns3__DeleteSimulationResource*)p->ptr;
		break;
	case SOAP_TYPE__ns3__DeleteSimulationResourceResponse:
		if (p->size < 0)
			delete (_ns3__DeleteSimulationResourceResponse*)p->ptr;
		else
			delete[] (_ns3__DeleteSimulationResourceResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns3__ServiceFault:
		if (p->size < 0)
			delete (_ns3__ServiceFault*)p->ptr;
		else
			delete[] (_ns3__ServiceFault*)p->ptr;
		break;
	case SOAP_TYPE__ns3__ResourceProperty:
		if (p->size < 0)
			delete (_ns3__ResourceProperty*)p->ptr;
		else
			delete[] (_ns3__ResourceProperty*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE___ns1__runDeterministicSimulator:
		if (p->size < 0)
			delete (struct __ns1__runDeterministicSimulator*)p->ptr;
		else
			delete[] (struct __ns1__runDeterministicSimulator*)p->ptr;
		break;
	case SOAP_TYPE___ns1__startDeterministicSimulator:
		if (p->size < 0)
			delete (struct __ns1__startDeterministicSimulator*)p->ptr;
		else
			delete[] (struct __ns1__startDeterministicSimulator*)p->ptr;
		break;
	case SOAP_TYPE___ns1__getSimulatorStatus:
		if (p->size < 0)
			delete (struct __ns1__getSimulatorStatus*)p->ptr;
		else
			delete[] (struct __ns1__getSimulatorStatus*)p->ptr;
		break;
	case SOAP_TYPE___ns1__getResult:
		if (p->size < 0)
			delete (struct __ns1__getResult*)p->ptr;
		else
			delete[] (struct __ns1__getResult*)p->ptr;
		break;
	case SOAP_TYPE___ns1__deleteSimulationResource:
		if (p->size < 0)
			delete (struct __ns1__deleteSimulationResource*)p->ptr;
		else
			delete[] (struct __ns1__deleteSimulationResource*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns3__OutputResult_format(struct soap *soap, enum _ns3__OutputResult_format *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns3__OutputResult_format
	*a = SOAP_DEFAULT__ns3__OutputResult_format;
#else
	*a = (enum _ns3__OutputResult_format)0;
#endif
}

static const struct soap_code_map soap_codes__ns3__OutputResult_format[] =
{	{ (long)_ns3__OutputResult_format__text, "text" },
	{ (long)_ns3__OutputResult_format__sbrml, "sbrml" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns3__OutputResult_format2s(struct soap *soap, enum _ns3__OutputResult_format n)
{	const char *s = soap_code_str(soap_codes__ns3__OutputResult_format, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__OutputResult_format(struct soap *soap, const char *tag, int id, const enum _ns3__OutputResult_format *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__OutputResult_format), type) || soap_send(soap, soap__ns3__OutputResult_format2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns3__OutputResult_format(struct soap *soap, const char *s, enum _ns3__OutputResult_format *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns3__OutputResult_format, s);
	if (map)
		*a = (enum _ns3__OutputResult_format)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum _ns3__OutputResult_format)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns3__OutputResult_format * SOAP_FMAC4 soap_in__ns3__OutputResult_format(struct soap *soap, const char *tag, enum _ns3__OutputResult_format *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns3__OutputResult_format *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__OutputResult_format, sizeof(enum _ns3__OutputResult_format), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2_ns3__OutputResult_format(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _ns3__OutputResult_format *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__OutputResult_format, 0, sizeof(enum _ns3__OutputResult_format), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns3__OutputResult_format(struct soap *soap, const enum _ns3__OutputResult_format *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__ns3__OutputResult_format);
	if (soap_out__ns3__OutputResult_format(soap, tag?tag:"ns3:OutputResult-format", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns3__OutputResult_format * SOAP_FMAC4 soap_get__ns3__OutputResult_format(struct soap *soap, enum _ns3__OutputResult_format *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__OutputResult_format(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__DeterministicParameters_outputFormat(struct soap *soap, enum _ns2__DeterministicParameters_outputFormat *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns2__DeterministicParameters_outputFormat
	*a = SOAP_DEFAULT__ns2__DeterministicParameters_outputFormat;
#else
	*a = (enum _ns2__DeterministicParameters_outputFormat)0;
#endif
}

static const struct soap_code_map soap_codes__ns2__DeterministicParameters_outputFormat[] =
{	{ (long)_ns2__DeterministicParameters_outputFormat__text, "text" },
	{ (long)_ns2__DeterministicParameters_outputFormat__sbrml, "sbrml" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__DeterministicParameters_outputFormat2s(struct soap *soap, enum _ns2__DeterministicParameters_outputFormat n)
{	const char *s = soap_code_str(soap_codes__ns2__DeterministicParameters_outputFormat, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__DeterministicParameters_outputFormat(struct soap *soap, const char *tag, int id, const enum _ns2__DeterministicParameters_outputFormat *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__DeterministicParameters_outputFormat), type) || soap_send(soap, soap__ns2__DeterministicParameters_outputFormat2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__DeterministicParameters_outputFormat(struct soap *soap, const char *s, enum _ns2__DeterministicParameters_outputFormat *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns2__DeterministicParameters_outputFormat, s);
	if (map)
		*a = (enum _ns2__DeterministicParameters_outputFormat)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum _ns2__DeterministicParameters_outputFormat)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns2__DeterministicParameters_outputFormat * SOAP_FMAC4 soap_in__ns2__DeterministicParameters_outputFormat(struct soap *soap, const char *tag, enum _ns2__DeterministicParameters_outputFormat *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns2__DeterministicParameters_outputFormat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__DeterministicParameters_outputFormat, sizeof(enum _ns2__DeterministicParameters_outputFormat), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2_ns2__DeterministicParameters_outputFormat(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _ns2__DeterministicParameters_outputFormat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__DeterministicParameters_outputFormat, 0, sizeof(enum _ns2__DeterministicParameters_outputFormat), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__DeterministicParameters_outputFormat(struct soap *soap, const enum _ns2__DeterministicParameters_outputFormat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__ns2__DeterministicParameters_outputFormat);
	if (soap_out__ns2__DeterministicParameters_outputFormat(soap, tag?tag:"ns2:DeterministicParameters-outputFormat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns2__DeterministicParameters_outputFormat * SOAP_FMAC4 soap_get__ns2__DeterministicParameters_outputFormat(struct soap *soap, enum _ns2__DeterministicParameters_outputFormat *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__DeterministicParameters_outputFormat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__DeterministicParameters_inputFormat(struct soap *soap, enum _ns2__DeterministicParameters_inputFormat *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns2__DeterministicParameters_inputFormat
	*a = SOAP_DEFAULT__ns2__DeterministicParameters_inputFormat;
#else
	*a = (enum _ns2__DeterministicParameters_inputFormat)0;
#endif
}

static const struct soap_code_map soap_codes__ns2__DeterministicParameters_inputFormat[] =
{	{ (long)_ns2__DeterministicParameters_inputFormat__SBML, "SBML" },
	{ (long)_ns2__DeterministicParameters_inputFormat__CopasiML, "CopasiML" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__DeterministicParameters_inputFormat2s(struct soap *soap, enum _ns2__DeterministicParameters_inputFormat n)
{	const char *s = soap_code_str(soap_codes__ns2__DeterministicParameters_inputFormat, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__DeterministicParameters_inputFormat(struct soap *soap, const char *tag, int id, const enum _ns2__DeterministicParameters_inputFormat *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__DeterministicParameters_inputFormat), type) || soap_send(soap, soap__ns2__DeterministicParameters_inputFormat2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__DeterministicParameters_inputFormat(struct soap *soap, const char *s, enum _ns2__DeterministicParameters_inputFormat *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns2__DeterministicParameters_inputFormat, s);
	if (map)
		*a = (enum _ns2__DeterministicParameters_inputFormat)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum _ns2__DeterministicParameters_inputFormat)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns2__DeterministicParameters_inputFormat * SOAP_FMAC4 soap_in__ns2__DeterministicParameters_inputFormat(struct soap *soap, const char *tag, enum _ns2__DeterministicParameters_inputFormat *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns2__DeterministicParameters_inputFormat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__DeterministicParameters_inputFormat, sizeof(enum _ns2__DeterministicParameters_inputFormat), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2_ns2__DeterministicParameters_inputFormat(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _ns2__DeterministicParameters_inputFormat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__DeterministicParameters_inputFormat, 0, sizeof(enum _ns2__DeterministicParameters_inputFormat), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__DeterministicParameters_inputFormat(struct soap *soap, const enum _ns2__DeterministicParameters_inputFormat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__ns2__DeterministicParameters_inputFormat);
	if (soap_out__ns2__DeterministicParameters_inputFormat(soap, tag?tag:"ns2:DeterministicParameters-inputFormat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns2__DeterministicParameters_inputFormat * SOAP_FMAC4 soap_get__ns2__DeterministicParameters_inputFormat(struct soap *soap, enum _ns2__DeterministicParameters_inputFormat *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__DeterministicParameters_inputFormat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__StatusCode(struct soap *soap, enum ns3__StatusCode *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__StatusCode
	*a = SOAP_DEFAULT_ns3__StatusCode;
#else
	*a = (enum ns3__StatusCode)0;
#endif
}

static const struct soap_code_map soap_codes_ns3__StatusCode[] =
{	{ (long)ns3__StatusCode__SUCCESS, "SUCCESS" },
	{ (long)ns3__StatusCode__FAIL, "FAIL" },
	{ (long)ns3__StatusCode__INCORRECTOBJECTMAP, "INCORRECTOBJECTMAP" },
	{ (long)ns3__StatusCode__UNKNOWNTRANSACTION, "UNKNOWNTRANSACTION" },
	{ (long)ns3__StatusCode__NOEXPERIMENTALDATA, "NOEXPERIMENTALDATA" },
	{ (long)ns3__StatusCode__INCOMPLETEDATA, "INCOMPLETEDATA" },
	{ (long)ns3__StatusCode__ALREADYEXISTS, "ALREADYEXISTS" },
	{ (long)ns3__StatusCode__NO_USCOREOF_USCORERESOURCES_USCOREEXCEEDED, "NO_OF_RESOURCES_EXCEEDED" },
	{ (long)ns3__StatusCode__COMPLETED, "COMPLETED" },
	{ (long)ns3__StatusCode__SCHEDULE_USCORETO_USCORESTART, "SCHEDULE_TO_START" },
	{ (long)ns3__StatusCode__RUNNING, "RUNNING" },
	{ (long)ns3__StatusCode__UNKNOWN, "UNKNOWN" },
	{ (long)ns3__StatusCode__SUSPENDED, "SUSPENDED" },
	{ (long)ns3__StatusCode__RESOURCE_USCOREALREADY_USCOREDELETED, "RESOURCE_ALREADY_DELETED" },
	{ (long)ns3__StatusCode__CANNOT_USCOREBE_USCORESTARTED, "CANNOT_BE_STARTED" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__StatusCode2s(struct soap *soap, enum ns3__StatusCode n)
{	const char *s = soap_code_str(soap_codes_ns3__StatusCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__StatusCode(struct soap *soap, const char *tag, int id, const enum ns3__StatusCode *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__StatusCode), type) || soap_send(soap, soap_ns3__StatusCode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__StatusCode(struct soap *soap, const char *s, enum ns3__StatusCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns3__StatusCode, s);
	if (map)
		*a = (enum ns3__StatusCode)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 14)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns3__StatusCode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns3__StatusCode * SOAP_FMAC4 soap_in_ns3__StatusCode(struct soap *soap, const char *tag, enum ns3__StatusCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns3__StatusCode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__StatusCode, sizeof(enum ns3__StatusCode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns3__StatusCode(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns3__StatusCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__StatusCode, 0, sizeof(enum ns3__StatusCode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__StatusCode(struct soap *soap, const enum ns3__StatusCode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__StatusCode);
	if (soap_out_ns3__StatusCode(soap, tag?tag:"ns3:StatusCode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns3__StatusCode * SOAP_FMAC4 soap_get_ns3__StatusCode(struct soap *soap, enum ns3__StatusCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__StatusCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Variable(struct soap *soap, enum ns2__Variable *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__Variable
	*a = SOAP_DEFAULT_ns2__Variable;
#else
	*a = (enum ns2__Variable)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__Variable[] =
{	{ (long)ns2__Variable__All_x0020Parameter_x0020Values, "All Parameter Values" },
	{ (long)ns2__Variable__Initial_x0020Concentration, "Initial Concentration" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Variable2s(struct soap *soap, enum ns2__Variable n)
{	const char *s = soap_code_str(soap_codes_ns2__Variable, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Variable(struct soap *soap, const char *tag, int id, const enum ns2__Variable *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Variable), type) || soap_send(soap, soap_ns2__Variable2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Variable(struct soap *soap, const char *s, enum ns2__Variable *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__Variable, s);
	if (map)
		*a = (enum ns2__Variable)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__Variable)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__Variable * SOAP_FMAC4 soap_in_ns2__Variable(struct soap *soap, const char *tag, enum ns2__Variable *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__Variable *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Variable, sizeof(enum ns2__Variable), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__Variable(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__Variable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Variable, 0, sizeof(enum ns2__Variable), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Variable(struct soap *soap, const enum ns2__Variable *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Variable);
	if (soap_out_ns2__Variable(soap, tag?tag:"ns2:Variable", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__Variable * SOAP_FMAC4 soap_get_ns2__Variable(struct soap *soap, enum ns2__Variable *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Variable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Function(struct soap *soap, enum ns2__Function *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__Function
	*a = SOAP_DEFAULT_ns2__Function;
#else
	*a = (enum ns2__Function)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__Function[] =
{	{ (long)ns2__Function__Concentration_x0020Fluxes_x0020of_x0020Reaction, "Concentration Fluxes of Reaction" },
	{ (long)ns2__Function__Particle_x0020Fluxes_x0020of_x0020Reactions, "Particle Fluxes of Reactions" },
	{ (long)ns2__Function__Non_Constant_x0020Concentration_x0020of_x0020Species, "Non-Constant Concentration of Species" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Function2s(struct soap *soap, enum ns2__Function n)
{	const char *s = soap_code_str(soap_codes_ns2__Function, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Function(struct soap *soap, const char *tag, int id, const enum ns2__Function *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Function), type) || soap_send(soap, soap_ns2__Function2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Function(struct soap *soap, const char *s, enum ns2__Function *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__Function, s);
	if (map)
		*a = (enum ns2__Function)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__Function)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__Function * SOAP_FMAC4 soap_in_ns2__Function(struct soap *soap, const char *tag, enum ns2__Function *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__Function *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Function, sizeof(enum ns2__Function), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__Function(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__Function *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Function, 0, sizeof(enum ns2__Function), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Function(struct soap *soap, const enum ns2__Function *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Function);
	if (soap_out_ns2__Function(soap, tag?tag:"ns2:Function", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__Function * SOAP_FMAC4 soap_get_ns2__Function(struct soap *soap, enum ns2__Function *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Function(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns3__ResourceProperty::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns3__ResourceProperty::resourceId);
	soap_default_std__string(soap, &this->_ns3__ResourceProperty::modelFile);
	soap_default_std__string(soap, &this->_ns3__ResourceProperty::resultFile);
	soap_default_xsd__integer(soap, &this->_ns3__ResourceProperty::lifeTime);
	/* transient soap skipped */
}

void _ns3__ResourceProperty::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns3__ResourceProperty::resourceId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__ResourceProperty::resourceId);
	soap_embedded(soap, &this->_ns3__ResourceProperty::modelFile, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__ResourceProperty::modelFile);
	soap_embedded(soap, &this->_ns3__ResourceProperty::resultFile, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__ResourceProperty::resultFile);
	soap_serialize_xsd__integer(soap, &this->_ns3__ResourceProperty::lifeTime);
	/* transient soap skipped */
}

int _ns3__ResourceProperty::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__ResourceProperty(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResourceProperty(struct soap *soap, const char *tag, int id, const _ns3__ResourceProperty *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__ResourceProperty), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:resourceId", -1, &(a->_ns3__ResourceProperty::resourceId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:modelFile", -1, &(a->_ns3__ResourceProperty::modelFile), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:resultFile", -1, &(a->_ns3__ResourceProperty::resultFile), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns3:lifeTime", -1, &(a->_ns3__ResourceProperty::lifeTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__ResourceProperty::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__ResourceProperty(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__ResourceProperty * SOAP_FMAC4 soap_in__ns3__ResourceProperty(struct soap *soap, const char *tag, _ns3__ResourceProperty *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__ResourceProperty *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__ResourceProperty, sizeof(_ns3__ResourceProperty), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__ResourceProperty)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__ResourceProperty *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_resourceId1 = 1;
	size_t soap_flag_modelFile1 = 1;
	size_t soap_flag_resultFile1 = 1;
	size_t soap_flag_lifeTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_resourceId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:resourceId", &(a->_ns3__ResourceProperty::resourceId), "xsd:string"))
				{	soap_flag_resourceId1--;
					continue;
				}
			if (soap_flag_modelFile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:modelFile", &(a->_ns3__ResourceProperty::modelFile), "xsd:string"))
				{	soap_flag_modelFile1--;
					continue;
				}
			if (soap_flag_resultFile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:resultFile", &(a->_ns3__ResourceProperty::resultFile), "xsd:string"))
				{	soap_flag_resultFile1--;
					continue;
				}
			if (soap_flag_lifeTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns3:lifeTime", &(a->_ns3__ResourceProperty::lifeTime), "xsd:integer"))
				{	soap_flag_lifeTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__ResourceProperty *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__ResourceProperty, 0, sizeof(_ns3__ResourceProperty), 0, soap_copy__ns3__ResourceProperty);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_resourceId1 > 0 || soap_flag_modelFile1 > 0 || soap_flag_resultFile1 > 0 || soap_flag_lifeTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__ResourceProperty::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__ResourceProperty);
	if (this->soap_out(soap, tag?tag:"ns3:ResourceProperty", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__ResourceProperty::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__ResourceProperty(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__ResourceProperty * SOAP_FMAC4 soap_get__ns3__ResourceProperty(struct soap *soap, _ns3__ResourceProperty *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__ResourceProperty(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__ResourceProperty * SOAP_FMAC2 soap_instantiate__ns3__ResourceProperty(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__ResourceProperty(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__ResourceProperty, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__ResourceProperty);
		if (size)
			*size = sizeof(_ns3__ResourceProperty);
		((_ns3__ResourceProperty*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__ResourceProperty[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__ResourceProperty);
		for (int i = 0; i < n; i++)
			((_ns3__ResourceProperty*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__ResourceProperty*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ResourceProperty(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__ResourceProperty %p -> %p\n", q, p));
	*(_ns3__ResourceProperty*)p = *(_ns3__ResourceProperty*)q;
}

void _ns3__ServiceFault::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns3__ServiceFault::errorMessage);
	/* transient soap skipped */
}

void _ns3__ServiceFault::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns3__ServiceFault::errorMessage, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__ServiceFault::errorMessage);
	/* transient soap skipped */
}

int _ns3__ServiceFault::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__ServiceFault(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ServiceFault(struct soap *soap, const char *tag, int id, const _ns3__ServiceFault *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__ServiceFault), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:errorMessage", -1, &(a->_ns3__ServiceFault::errorMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__ServiceFault::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__ServiceFault(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__ServiceFault * SOAP_FMAC4 soap_in__ns3__ServiceFault(struct soap *soap, const char *tag, _ns3__ServiceFault *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__ServiceFault *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__ServiceFault, sizeof(_ns3__ServiceFault), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__ServiceFault)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__ServiceFault *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:errorMessage", &(a->_ns3__ServiceFault::errorMessage), "xsd:string"))
				{	soap_flag_errorMessage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__ServiceFault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__ServiceFault, 0, sizeof(_ns3__ServiceFault), 0, soap_copy__ns3__ServiceFault);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorMessage1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__ServiceFault::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__ServiceFault);
	if (this->soap_out(soap, tag?tag:"ns3:ServiceFault", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__ServiceFault::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__ServiceFault(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__ServiceFault * SOAP_FMAC4 soap_get__ns3__ServiceFault(struct soap *soap, _ns3__ServiceFault *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__ServiceFault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__ServiceFault * SOAP_FMAC2 soap_instantiate__ns3__ServiceFault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__ServiceFault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__ServiceFault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__ServiceFault);
		if (size)
			*size = sizeof(_ns3__ServiceFault);
		((_ns3__ServiceFault*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__ServiceFault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__ServiceFault);
		for (int i = 0; i < n; i++)
			((_ns3__ServiceFault*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__ServiceFault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ServiceFault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__ServiceFault %p -> %p\n", q, p));
	*(_ns3__ServiceFault*)p = *(_ns3__ServiceFault*)q;
}

void _ns3__DeleteSimulationResourceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__DeleteSimulationResourceResponse::status = NULL;
	/* transient soap skipped */
}

void _ns3__DeleteSimulationResourceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__Status(soap, &this->_ns3__DeleteSimulationResourceResponse::status);
	/* transient soap skipped */
}

int _ns3__DeleteSimulationResourceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__DeleteSimulationResourceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DeleteSimulationResourceResponse(struct soap *soap, const char *tag, int id, const _ns3__DeleteSimulationResourceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__DeleteSimulationResourceResponse), type))
		return soap->error;
	if (a->status)
		soap_element_result(soap, "ns3:status");
	if (soap_out_PointerTons3__Status(soap, "ns3:status", -1, &(a->_ns3__DeleteSimulationResourceResponse::status), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__DeleteSimulationResourceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__DeleteSimulationResourceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__DeleteSimulationResourceResponse * SOAP_FMAC4 soap_in__ns3__DeleteSimulationResourceResponse(struct soap *soap, const char *tag, _ns3__DeleteSimulationResourceResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__DeleteSimulationResourceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__DeleteSimulationResourceResponse, sizeof(_ns3__DeleteSimulationResourceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__DeleteSimulationResourceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__DeleteSimulationResourceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__Status(soap, "ns3:status", &(a->_ns3__DeleteSimulationResourceResponse::status), "ns3:Status"))
				{	soap_flag_status1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:status");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__DeleteSimulationResourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__DeleteSimulationResourceResponse, 0, sizeof(_ns3__DeleteSimulationResourceResponse), 0, soap_copy__ns3__DeleteSimulationResourceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__DeleteSimulationResourceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__DeleteSimulationResourceResponse);
	if (this->soap_out(soap, tag?tag:"ns3:DeleteSimulationResourceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__DeleteSimulationResourceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__DeleteSimulationResourceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__DeleteSimulationResourceResponse * SOAP_FMAC4 soap_get__ns3__DeleteSimulationResourceResponse(struct soap *soap, _ns3__DeleteSimulationResourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__DeleteSimulationResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__DeleteSimulationResourceResponse * SOAP_FMAC2 soap_instantiate__ns3__DeleteSimulationResourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__DeleteSimulationResourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__DeleteSimulationResourceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__DeleteSimulationResourceResponse);
		if (size)
			*size = sizeof(_ns3__DeleteSimulationResourceResponse);
		((_ns3__DeleteSimulationResourceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__DeleteSimulationResourceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__DeleteSimulationResourceResponse);
		for (int i = 0; i < n; i++)
			((_ns3__DeleteSimulationResourceResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__DeleteSimulationResourceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DeleteSimulationResourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__DeleteSimulationResourceResponse %p -> %p\n", q, p));
	*(_ns3__DeleteSimulationResourceResponse*)p = *(_ns3__DeleteSimulationResourceResponse*)q;
}

void _ns3__DeleteSimulationResource::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns3__DeleteSimulationResource::userId);
	soap_default_int(soap, &this->_ns3__DeleteSimulationResource::resourceId);
	/* transient soap skipped */
}

void _ns3__DeleteSimulationResource::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns3__DeleteSimulationResource::userId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__DeleteSimulationResource::userId);
	soap_embedded(soap, &this->_ns3__DeleteSimulationResource::resourceId, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns3__DeleteSimulationResource::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__DeleteSimulationResource(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DeleteSimulationResource(struct soap *soap, const char *tag, int id, const _ns3__DeleteSimulationResource *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__DeleteSimulationResource), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:userId", -1, &(a->_ns3__DeleteSimulationResource::userId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns3:resourceId", -1, &(a->_ns3__DeleteSimulationResource::resourceId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__DeleteSimulationResource::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__DeleteSimulationResource(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__DeleteSimulationResource * SOAP_FMAC4 soap_in__ns3__DeleteSimulationResource(struct soap *soap, const char *tag, _ns3__DeleteSimulationResource *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__DeleteSimulationResource *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__DeleteSimulationResource, sizeof(_ns3__DeleteSimulationResource), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__DeleteSimulationResource)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__DeleteSimulationResource *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_resourceId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:userId", &(a->_ns3__DeleteSimulationResource::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_resourceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns3:resourceId", &(a->_ns3__DeleteSimulationResource::resourceId), "xsd:int"))
				{	soap_flag_resourceId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__DeleteSimulationResource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__DeleteSimulationResource, 0, sizeof(_ns3__DeleteSimulationResource), 0, soap_copy__ns3__DeleteSimulationResource);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_resourceId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__DeleteSimulationResource::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__DeleteSimulationResource);
	if (this->soap_out(soap, tag?tag:"ns3:DeleteSimulationResource", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__DeleteSimulationResource::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__DeleteSimulationResource(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__DeleteSimulationResource * SOAP_FMAC4 soap_get__ns3__DeleteSimulationResource(struct soap *soap, _ns3__DeleteSimulationResource *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__DeleteSimulationResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__DeleteSimulationResource * SOAP_FMAC2 soap_instantiate__ns3__DeleteSimulationResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__DeleteSimulationResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__DeleteSimulationResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__DeleteSimulationResource);
		if (size)
			*size = sizeof(_ns3__DeleteSimulationResource);
		((_ns3__DeleteSimulationResource*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__DeleteSimulationResource[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__DeleteSimulationResource);
		for (int i = 0; i < n; i++)
			((_ns3__DeleteSimulationResource*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__DeleteSimulationResource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DeleteSimulationResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__DeleteSimulationResource %p -> %p\n", q, p));
	*(_ns3__DeleteSimulationResource*)p = *(_ns3__DeleteSimulationResource*)q;
}

void _ns3__GetResultResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetResultResponse::outputResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetResultResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__OutputResult(soap, &this->_ns3__GetResultResponse::outputResult);
	/* transient soap skipped */
}

int _ns3__GetResultResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetResultResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetResultResponse(struct soap *soap, const char *tag, int id, const _ns3__GetResultResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetResultResponse), type))
		return soap->error;
	if (a->outputResult)
		soap_element_result(soap, "ns3:outputResult");
	if (soap_out_PointerTons3__OutputResult(soap, "ns3:outputResult", -1, &(a->_ns3__GetResultResponse::outputResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetResultResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetResultResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetResultResponse * SOAP_FMAC4 soap_in__ns3__GetResultResponse(struct soap *soap, const char *tag, _ns3__GetResultResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetResultResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetResultResponse, sizeof(_ns3__GetResultResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetResultResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetResultResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_outputResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_outputResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__OutputResult(soap, "ns3:outputResult", &(a->_ns3__GetResultResponse::outputResult), "ns3:OutputResult"))
				{	soap_flag_outputResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:outputResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetResultResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetResultResponse, 0, sizeof(_ns3__GetResultResponse), 0, soap_copy__ns3__GetResultResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_outputResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__GetResultResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetResultResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetResultResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetResultResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetResultResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetResultResponse * SOAP_FMAC4 soap_get__ns3__GetResultResponse(struct soap *soap, _ns3__GetResultResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetResultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetResultResponse * SOAP_FMAC2 soap_instantiate__ns3__GetResultResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetResultResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetResultResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__GetResultResponse);
		if (size)
			*size = sizeof(_ns3__GetResultResponse);
		((_ns3__GetResultResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__GetResultResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetResultResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetResultResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetResultResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetResultResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetResultResponse %p -> %p\n", q, p));
	*(_ns3__GetResultResponse*)p = *(_ns3__GetResultResponse*)q;
}

void _ns3__GetResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns3__GetResult::userId);
	soap_default_int(soap, &this->_ns3__GetResult::resourceId);
	/* transient soap skipped */
}

void _ns3__GetResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns3__GetResult::userId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__GetResult::userId);
	soap_embedded(soap, &this->_ns3__GetResult::resourceId, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns3__GetResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetResult(struct soap *soap, const char *tag, int id, const _ns3__GetResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetResult), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:userId", -1, &(a->_ns3__GetResult::userId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns3:resourceId", -1, &(a->_ns3__GetResult::resourceId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetResult * SOAP_FMAC4 soap_in__ns3__GetResult(struct soap *soap, const char *tag, _ns3__GetResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetResult, sizeof(_ns3__GetResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_resourceId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:userId", &(a->_ns3__GetResult::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_resourceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns3:resourceId", &(a->_ns3__GetResult::resourceId), "xsd:int"))
				{	soap_flag_resourceId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetResult, 0, sizeof(_ns3__GetResult), 0, soap_copy__ns3__GetResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_resourceId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__GetResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetResult);
	if (this->soap_out(soap, tag?tag:"ns3:GetResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetResult * SOAP_FMAC4 soap_get__ns3__GetResult(struct soap *soap, _ns3__GetResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetResult * SOAP_FMAC2 soap_instantiate__ns3__GetResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__GetResult);
		if (size)
			*size = sizeof(_ns3__GetResult);
		((_ns3__GetResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__GetResult[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetResult);
		for (int i = 0; i < n; i++)
			((_ns3__GetResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetResult %p -> %p\n", q, p));
	*(_ns3__GetResult*)p = *(_ns3__GetResult*)q;
}

void _ns3__GetSimulatorStatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetSimulatorStatusResponse::status = NULL;
	/* transient soap skipped */
}

void _ns3__GetSimulatorStatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__Status(soap, &this->_ns3__GetSimulatorStatusResponse::status);
	/* transient soap skipped */
}

int _ns3__GetSimulatorStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetSimulatorStatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetSimulatorStatusResponse(struct soap *soap, const char *tag, int id, const _ns3__GetSimulatorStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetSimulatorStatusResponse), type))
		return soap->error;
	if (a->status)
		soap_element_result(soap, "ns3:status");
	if (soap_out_PointerTons3__Status(soap, "ns3:status", -1, &(a->_ns3__GetSimulatorStatusResponse::status), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetSimulatorStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetSimulatorStatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetSimulatorStatusResponse * SOAP_FMAC4 soap_in__ns3__GetSimulatorStatusResponse(struct soap *soap, const char *tag, _ns3__GetSimulatorStatusResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetSimulatorStatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetSimulatorStatusResponse, sizeof(_ns3__GetSimulatorStatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetSimulatorStatusResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetSimulatorStatusResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__Status(soap, "ns3:status", &(a->_ns3__GetSimulatorStatusResponse::status), "ns3:Status"))
				{	soap_flag_status1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:status");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetSimulatorStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetSimulatorStatusResponse, 0, sizeof(_ns3__GetSimulatorStatusResponse), 0, soap_copy__ns3__GetSimulatorStatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__GetSimulatorStatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetSimulatorStatusResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetSimulatorStatusResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetSimulatorStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetSimulatorStatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetSimulatorStatusResponse * SOAP_FMAC4 soap_get__ns3__GetSimulatorStatusResponse(struct soap *soap, _ns3__GetSimulatorStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetSimulatorStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetSimulatorStatusResponse * SOAP_FMAC2 soap_instantiate__ns3__GetSimulatorStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetSimulatorStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetSimulatorStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__GetSimulatorStatusResponse);
		if (size)
			*size = sizeof(_ns3__GetSimulatorStatusResponse);
		((_ns3__GetSimulatorStatusResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__GetSimulatorStatusResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetSimulatorStatusResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetSimulatorStatusResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetSimulatorStatusResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetSimulatorStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetSimulatorStatusResponse %p -> %p\n", q, p));
	*(_ns3__GetSimulatorStatusResponse*)p = *(_ns3__GetSimulatorStatusResponse*)q;
}

void _ns3__GetSimulatorStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns3__GetSimulatorStatus::userId);
	soap_default_int(soap, &this->_ns3__GetSimulatorStatus::resourceId);
	/* transient soap skipped */
}

void _ns3__GetSimulatorStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns3__GetSimulatorStatus::userId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns3__GetSimulatorStatus::userId);
	soap_embedded(soap, &this->_ns3__GetSimulatorStatus::resourceId, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns3__GetSimulatorStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetSimulatorStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetSimulatorStatus(struct soap *soap, const char *tag, int id, const _ns3__GetSimulatorStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetSimulatorStatus), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:userId", -1, &(a->_ns3__GetSimulatorStatus::userId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns3:resourceId", -1, &(a->_ns3__GetSimulatorStatus::resourceId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetSimulatorStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetSimulatorStatus(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetSimulatorStatus * SOAP_FMAC4 soap_in__ns3__GetSimulatorStatus(struct soap *soap, const char *tag, _ns3__GetSimulatorStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetSimulatorStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetSimulatorStatus, sizeof(_ns3__GetSimulatorStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetSimulatorStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetSimulatorStatus *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_resourceId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:userId", &(a->_ns3__GetSimulatorStatus::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_resourceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns3:resourceId", &(a->_ns3__GetSimulatorStatus::resourceId), "xsd:int"))
				{	soap_flag_resourceId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetSimulatorStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetSimulatorStatus, 0, sizeof(_ns3__GetSimulatorStatus), 0, soap_copy__ns3__GetSimulatorStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_resourceId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns3__GetSimulatorStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetSimulatorStatus);
	if (this->soap_out(soap, tag?tag:"ns3:GetSimulatorStatus", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetSimulatorStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetSimulatorStatus(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetSimulatorStatus * SOAP_FMAC4 soap_get__ns3__GetSimulatorStatus(struct soap *soap, _ns3__GetSimulatorStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetSimulatorStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetSimulatorStatus * SOAP_FMAC2 soap_instantiate__ns3__GetSimulatorStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetSimulatorStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetSimulatorStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns3__GetSimulatorStatus);
		if (size)
			*size = sizeof(_ns3__GetSimulatorStatus);
		((_ns3__GetSimulatorStatus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns3__GetSimulatorStatus[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetSimulatorStatus);
		for (int i = 0; i < n; i++)
			((_ns3__GetSimulatorStatus*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetSimulatorStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetSimulatorStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetSimulatorStatus %p -> %p\n", q, p));
	*(_ns3__GetSimulatorStatus*)p = *(_ns3__GetSimulatorStatus*)q;
}

void ns3__OutputResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__OutputResult::result);
	this->ns3__OutputResult::format = (enum _ns3__OutputResult_format)1;
	/* transient soap skipped */
}

void ns3__OutputResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__OutputResult::result, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__OutputResult::result);
	/* transient soap skipped */
}

int ns3__OutputResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__OutputResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OutputResult(struct soap *soap, const char *tag, int id, const ns3__OutputResult *a, const char *type)
{
	soap_set_attr(soap, "format", soap__ns3__OutputResult_format2s(soap, ((ns3__OutputResult*)a)->format));
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__OutputResult), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:result", -1, &(a->ns3__OutputResult::result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__OutputResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__OutputResult(soap, tag, this, type);
}

SOAP_FMAC3 ns3__OutputResult * SOAP_FMAC4 soap_in_ns3__OutputResult(struct soap *soap, const char *tag, ns3__OutputResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__OutputResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__OutputResult, sizeof(ns3__OutputResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__OutputResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__OutputResult *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2_ns3__OutputResult_format(soap, soap_attr_value(soap, "format", 0), &((ns3__OutputResult*)a)->format))
		return NULL;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:result", &(a->ns3__OutputResult::result), "xsd:string"))
				{	soap_flag_result1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__OutputResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__OutputResult, 0, sizeof(ns3__OutputResult), 0, soap_copy_ns3__OutputResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns3__OutputResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__OutputResult);
	if (this->soap_out(soap, tag?tag:"ns3:OutputResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__OutputResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__OutputResult(soap, this, tag, type);
}

SOAP_FMAC3 ns3__OutputResult * SOAP_FMAC4 soap_get_ns3__OutputResult(struct soap *soap, ns3__OutputResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__OutputResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__OutputResult * SOAP_FMAC2 soap_instantiate_ns3__OutputResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__OutputResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__OutputResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__OutputResult);
		if (size)
			*size = sizeof(ns3__OutputResult);
		((ns3__OutputResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__OutputResult[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__OutputResult);
		for (int i = 0; i < n; i++)
			((ns3__OutputResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__OutputResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__OutputResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__OutputResult %p -> %p\n", q, p));
	*(ns3__OutputResult*)p = *(ns3__OutputResult*)q;
}

void ns3__User::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__User::userId);
	this->ns3__User::password = NULL;
	/* transient soap skipped */
}

void ns3__User::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__User::userId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__User::userId);
	soap_serialize_PointerTostd__string(soap, &this->ns3__User::password);
	/* transient soap skipped */
}

int ns3__User::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__User(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__User(struct soap *soap, const char *tag, int id, const ns3__User *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__User), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:userId", -1, &(a->ns3__User::userId), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:password", -1, &(a->ns3__User::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__User::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__User(soap, tag, this, type);
}

SOAP_FMAC3 ns3__User * SOAP_FMAC4 soap_in_ns3__User(struct soap *soap, const char *tag, ns3__User *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__User *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__User, sizeof(ns3__User), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__User)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__User *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:userId", &(a->ns3__User::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:password", &(a->ns3__User::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__User *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__User, 0, sizeof(ns3__User), 0, soap_copy_ns3__User);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns3__User::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__User);
	if (this->soap_out(soap, tag?tag:"ns3:User", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__User::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__User(soap, this, tag, type);
}

SOAP_FMAC3 ns3__User * SOAP_FMAC4 soap_get_ns3__User(struct soap *soap, ns3__User *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__User(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__User * SOAP_FMAC2 soap_instantiate_ns3__User(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__User(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__User, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__User);
		if (size)
			*size = sizeof(ns3__User);
		((ns3__User*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__User[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__User);
		for (int i = 0; i < n; i++)
			((ns3__User*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__User*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__User(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__User %p -> %p\n", q, p));
	*(ns3__User*)p = *(ns3__User*)q;
}

void ns3__Transaction::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns3__Transaction::id);
	this->ns3__Transaction::duration = NULL;
	/* transient soap skipped */
}

void ns3__Transaction::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__Transaction::id, SOAP_TYPE_int);
	soap_serialize_PointerToint(soap, &this->ns3__Transaction::duration);
	/* transient soap skipped */
}

int ns3__Transaction::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__Transaction(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Transaction(struct soap *soap, const char *tag, int id, const ns3__Transaction *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__Transaction), type))
		return soap->error;
	if (soap_out_int(soap, "ns3:id", -1, &(a->ns3__Transaction::id), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:duration", -1, &(a->ns3__Transaction::duration), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__Transaction::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__Transaction(soap, tag, this, type);
}

SOAP_FMAC3 ns3__Transaction * SOAP_FMAC4 soap_in_ns3__Transaction(struct soap *soap, const char *tag, ns3__Transaction *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__Transaction *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__Transaction, sizeof(ns3__Transaction), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__Transaction)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__Transaction *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_duration1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns3:id", &(a->ns3__Transaction::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_duration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:duration", &(a->ns3__Transaction::duration), "xsd:int"))
				{	soap_flag_duration1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__Transaction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__Transaction, 0, sizeof(ns3__Transaction), 0, soap_copy_ns3__Transaction);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns3__Transaction::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__Transaction);
	if (this->soap_out(soap, tag?tag:"ns3:Transaction", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__Transaction::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__Transaction(soap, this, tag, type);
}

SOAP_FMAC3 ns3__Transaction * SOAP_FMAC4 soap_get_ns3__Transaction(struct soap *soap, ns3__Transaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__Transaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__Transaction * SOAP_FMAC2 soap_instantiate_ns3__Transaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__Transaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__Transaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__Transaction);
		if (size)
			*size = sizeof(ns3__Transaction);
		((ns3__Transaction*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__Transaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__Transaction);
		for (int i = 0; i < n; i++)
			((ns3__Transaction*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__Transaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__Transaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__Transaction %p -> %p\n", q, p));
	*(ns3__Transaction*)p = *(ns3__Transaction*)q;
}

void ns3__Status::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__StatusCode(soap, &this->ns3__Status::code);
	this->ns3__Status::message = NULL;
	/* transient soap skipped */
}

void ns3__Status::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__Status::message);
	/* transient soap skipped */
}

int ns3__Status::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__Status(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Status(struct soap *soap, const char *tag, int id, const ns3__Status *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__Status), type))
		return soap->error;
	if (soap_out_ns3__StatusCode(soap, "ns3:code", -1, &(a->ns3__Status::code), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:message", -1, &(a->ns3__Status::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__Status::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__Status(soap, tag, this, type);
}

SOAP_FMAC3 ns3__Status * SOAP_FMAC4 soap_in_ns3__Status(struct soap *soap, const char *tag, ns3__Status *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__Status *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__Status, sizeof(ns3__Status), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__Status)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__Status *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns3__StatusCode(soap, "ns3:code", &(a->ns3__Status::code), "ns3:StatusCode"))
				{	soap_flag_code1--;
					continue;
				}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:message", &(a->ns3__Status::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__Status, 0, sizeof(ns3__Status), 0, soap_copy_ns3__Status);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns3__Status::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__Status);
	if (this->soap_out(soap, tag?tag:"ns3:Status", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__Status::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__Status(soap, this, tag, type);
}

SOAP_FMAC3 ns3__Status * SOAP_FMAC4 soap_get_ns3__Status(struct soap *soap, ns3__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__Status * SOAP_FMAC2 soap_instantiate_ns3__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__Status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__Status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__Status);
		if (size)
			*size = sizeof(ns3__Status);
		((ns3__Status*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__Status[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__Status);
		for (int i = 0; i < n; i++)
			((ns3__Status*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__Status*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__Status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__Status %p -> %p\n", q, p));
	*(ns3__Status*)p = *(ns3__Status*)q;
}

void _ns2__StartDeterministicSimulatorResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__StartDeterministicSimulatorResponse::status = NULL;
	soap_default_int(soap, &this->_ns2__StartDeterministicSimulatorResponse::resourceId);
	/* transient soap skipped */
}

void _ns2__StartDeterministicSimulatorResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__Status(soap, &this->_ns2__StartDeterministicSimulatorResponse::status);
	soap_embedded(soap, &this->_ns2__StartDeterministicSimulatorResponse::resourceId, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns2__StartDeterministicSimulatorResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__StartDeterministicSimulatorResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StartDeterministicSimulatorResponse(struct soap *soap, const char *tag, int id, const _ns2__StartDeterministicSimulatorResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__Status(soap, "status", -1, &(a->_ns2__StartDeterministicSimulatorResponse::status), ""))
		return soap->error;
	if (soap_out_int(soap, "resourceId", -1, &(a->_ns2__StartDeterministicSimulatorResponse::resourceId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__StartDeterministicSimulatorResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__StartDeterministicSimulatorResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulatorResponse * SOAP_FMAC4 soap_in__ns2__StartDeterministicSimulatorResponse(struct soap *soap, const char *tag, _ns2__StartDeterministicSimulatorResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__StartDeterministicSimulatorResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse, sizeof(_ns2__StartDeterministicSimulatorResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__StartDeterministicSimulatorResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__StartDeterministicSimulatorResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_status1 = 1;
	size_t soap_flag_resourceId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__Status(soap, "status", &(a->_ns2__StartDeterministicSimulatorResponse::status), "ns3:Status"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_resourceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "resourceId", &(a->_ns2__StartDeterministicSimulatorResponse::resourceId), "xsd:int"))
				{	soap_flag_resourceId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__StartDeterministicSimulatorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse, 0, sizeof(_ns2__StartDeterministicSimulatorResponse), 0, soap_copy__ns2__StartDeterministicSimulatorResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status1 > 0 || soap_flag_resourceId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__StartDeterministicSimulatorResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse);
	if (this->soap_out(soap, tag?tag:"ns2:StartDeterministicSimulatorResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__StartDeterministicSimulatorResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__StartDeterministicSimulatorResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulatorResponse * SOAP_FMAC4 soap_get__ns2__StartDeterministicSimulatorResponse(struct soap *soap, _ns2__StartDeterministicSimulatorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__StartDeterministicSimulatorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__StartDeterministicSimulatorResponse * SOAP_FMAC2 soap_instantiate__ns2__StartDeterministicSimulatorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__StartDeterministicSimulatorResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns2__StartDeterministicSimulatorResponse);
		if (size)
			*size = sizeof(_ns2__StartDeterministicSimulatorResponse);
		((_ns2__StartDeterministicSimulatorResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns2__StartDeterministicSimulatorResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__StartDeterministicSimulatorResponse);
		for (int i = 0; i < n; i++)
			((_ns2__StartDeterministicSimulatorResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__StartDeterministicSimulatorResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__StartDeterministicSimulatorResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__StartDeterministicSimulatorResponse %p -> %p\n", q, p));
	*(_ns2__StartDeterministicSimulatorResponse*)p = *(_ns2__StartDeterministicSimulatorResponse*)q;
}

void _ns2__StartDeterministicSimulator::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__StartDeterministicSimulator::user = NULL;
	this->_ns2__StartDeterministicSimulator::parameters = NULL;
	/* transient soap skipped */
}

void _ns2__StartDeterministicSimulator::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__User(soap, &this->_ns2__StartDeterministicSimulator::user);
	soap_serialize_PointerTons2__DeterministicParameters(soap, &this->_ns2__StartDeterministicSimulator::parameters);
	/* transient soap skipped */
}

int _ns2__StartDeterministicSimulator::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__StartDeterministicSimulator(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StartDeterministicSimulator(struct soap *soap, const char *tag, int id, const _ns2__StartDeterministicSimulator *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__StartDeterministicSimulator), type))
		return soap->error;
	if (soap_out_PointerTons3__User(soap, "user", -1, &(a->_ns2__StartDeterministicSimulator::user), ""))
		return soap->error;
	if (soap_out_PointerTons2__DeterministicParameters(soap, "parameters", -1, &(a->_ns2__StartDeterministicSimulator::parameters), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__StartDeterministicSimulator::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__StartDeterministicSimulator(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulator * SOAP_FMAC4 soap_in__ns2__StartDeterministicSimulator(struct soap *soap, const char *tag, _ns2__StartDeterministicSimulator *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__StartDeterministicSimulator *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__StartDeterministicSimulator, sizeof(_ns2__StartDeterministicSimulator), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__StartDeterministicSimulator)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__StartDeterministicSimulator *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_user1 = 1;
	size_t soap_flag_parameters1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__User(soap, "user", &(a->_ns2__StartDeterministicSimulator::user), "ns3:User"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_parameters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DeterministicParameters(soap, "parameters", &(a->_ns2__StartDeterministicSimulator::parameters), "ns2:DeterministicParameters"))
				{	soap_flag_parameters1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__StartDeterministicSimulator *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__StartDeterministicSimulator, 0, sizeof(_ns2__StartDeterministicSimulator), 0, soap_copy__ns2__StartDeterministicSimulator);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_user1 > 0 || soap_flag_parameters1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__StartDeterministicSimulator::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__StartDeterministicSimulator);
	if (this->soap_out(soap, tag?tag:"ns2:StartDeterministicSimulator", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__StartDeterministicSimulator::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__StartDeterministicSimulator(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulator * SOAP_FMAC4 soap_get__ns2__StartDeterministicSimulator(struct soap *soap, _ns2__StartDeterministicSimulator *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__StartDeterministicSimulator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__StartDeterministicSimulator * SOAP_FMAC2 soap_instantiate__ns2__StartDeterministicSimulator(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__StartDeterministicSimulator(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__StartDeterministicSimulator, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns2__StartDeterministicSimulator);
		if (size)
			*size = sizeof(_ns2__StartDeterministicSimulator);
		((_ns2__StartDeterministicSimulator*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns2__StartDeterministicSimulator[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__StartDeterministicSimulator);
		for (int i = 0; i < n; i++)
			((_ns2__StartDeterministicSimulator*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__StartDeterministicSimulator*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__StartDeterministicSimulator(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__StartDeterministicSimulator %p -> %p\n", q, p));
	*(_ns2__StartDeterministicSimulator*)p = *(_ns2__StartDeterministicSimulator*)q;
}

void _ns2__RunDeterministicSimulatorResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__RunDeterministicSimulatorResponse::outputResult = NULL;
	soap_default_std__string(soap, &this->_ns2__RunDeterministicSimulatorResponse::sensitityResult);
	this->_ns2__RunDeterministicSimulatorResponse::updatedModel = NULL;
	/* transient soap skipped */
}

void _ns2__RunDeterministicSimulatorResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__OutputResult(soap, &this->_ns2__RunDeterministicSimulatorResponse::outputResult);
	soap_embedded(soap, &this->_ns2__RunDeterministicSimulatorResponse::sensitityResult, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__RunDeterministicSimulatorResponse::sensitityResult);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__RunDeterministicSimulatorResponse::updatedModel);
	/* transient soap skipped */
}

int _ns2__RunDeterministicSimulatorResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__RunDeterministicSimulatorResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__RunDeterministicSimulatorResponse(struct soap *soap, const char *tag, int id, const _ns2__RunDeterministicSimulatorResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__OutputResult(soap, "outputResult", -1, &(a->_ns2__RunDeterministicSimulatorResponse::outputResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sensitityResult", -1, &(a->_ns2__RunDeterministicSimulatorResponse::sensitityResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "updatedModel", -1, &(a->_ns2__RunDeterministicSimulatorResponse::updatedModel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__RunDeterministicSimulatorResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__RunDeterministicSimulatorResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulatorResponse * SOAP_FMAC4 soap_in__ns2__RunDeterministicSimulatorResponse(struct soap *soap, const char *tag, _ns2__RunDeterministicSimulatorResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__RunDeterministicSimulatorResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse, sizeof(_ns2__RunDeterministicSimulatorResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__RunDeterministicSimulatorResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__RunDeterministicSimulatorResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_outputResult1 = 1;
	size_t soap_flag_sensitityResult1 = 1;
	size_t soap_flag_updatedModel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_outputResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__OutputResult(soap, "outputResult", &(a->_ns2__RunDeterministicSimulatorResponse::outputResult), "ns3:OutputResult"))
				{	soap_flag_outputResult1--;
					continue;
				}
			if (soap_flag_sensitityResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sensitityResult", &(a->_ns2__RunDeterministicSimulatorResponse::sensitityResult), "xsd:string"))
				{	soap_flag_sensitityResult1--;
					continue;
				}
			if (soap_flag_updatedModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "updatedModel", &(a->_ns2__RunDeterministicSimulatorResponse::updatedModel), "xsd:string"))
				{	soap_flag_updatedModel1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__RunDeterministicSimulatorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse, 0, sizeof(_ns2__RunDeterministicSimulatorResponse), 0, soap_copy__ns2__RunDeterministicSimulatorResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_outputResult1 > 0 || soap_flag_sensitityResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__RunDeterministicSimulatorResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse);
	if (this->soap_out(soap, tag?tag:"ns2:RunDeterministicSimulatorResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__RunDeterministicSimulatorResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__RunDeterministicSimulatorResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulatorResponse * SOAP_FMAC4 soap_get__ns2__RunDeterministicSimulatorResponse(struct soap *soap, _ns2__RunDeterministicSimulatorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__RunDeterministicSimulatorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__RunDeterministicSimulatorResponse * SOAP_FMAC2 soap_instantiate__ns2__RunDeterministicSimulatorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__RunDeterministicSimulatorResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns2__RunDeterministicSimulatorResponse);
		if (size)
			*size = sizeof(_ns2__RunDeterministicSimulatorResponse);
		((_ns2__RunDeterministicSimulatorResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns2__RunDeterministicSimulatorResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__RunDeterministicSimulatorResponse);
		for (int i = 0; i < n; i++)
			((_ns2__RunDeterministicSimulatorResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__RunDeterministicSimulatorResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__RunDeterministicSimulatorResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__RunDeterministicSimulatorResponse %p -> %p\n", q, p));
	*(_ns2__RunDeterministicSimulatorResponse*)p = *(_ns2__RunDeterministicSimulatorResponse*)q;
}

void _ns2__RunDeterministicSimulator::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__RunDeterministicSimulator::parameters = NULL;
	/* transient soap skipped */
}

void _ns2__RunDeterministicSimulator::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DeterministicParameters(soap, &this->_ns2__RunDeterministicSimulator::parameters);
	/* transient soap skipped */
}

int _ns2__RunDeterministicSimulator::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__RunDeterministicSimulator(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__RunDeterministicSimulator(struct soap *soap, const char *tag, int id, const _ns2__RunDeterministicSimulator *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__RunDeterministicSimulator), type))
		return soap->error;
	if (soap_out_PointerTons2__DeterministicParameters(soap, "parameters", -1, &(a->_ns2__RunDeterministicSimulator::parameters), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__RunDeterministicSimulator::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__RunDeterministicSimulator(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulator * SOAP_FMAC4 soap_in__ns2__RunDeterministicSimulator(struct soap *soap, const char *tag, _ns2__RunDeterministicSimulator *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__RunDeterministicSimulator *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__RunDeterministicSimulator, sizeof(_ns2__RunDeterministicSimulator), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__RunDeterministicSimulator)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__RunDeterministicSimulator *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_parameters1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parameters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DeterministicParameters(soap, "parameters", &(a->_ns2__RunDeterministicSimulator::parameters), "ns2:DeterministicParameters"))
				{	soap_flag_parameters1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__RunDeterministicSimulator *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__RunDeterministicSimulator, 0, sizeof(_ns2__RunDeterministicSimulator), 0, soap_copy__ns2__RunDeterministicSimulator);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_parameters1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__RunDeterministicSimulator::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__RunDeterministicSimulator);
	if (this->soap_out(soap, tag?tag:"ns2:RunDeterministicSimulator", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__RunDeterministicSimulator::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__RunDeterministicSimulator(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulator * SOAP_FMAC4 soap_get__ns2__RunDeterministicSimulator(struct soap *soap, _ns2__RunDeterministicSimulator *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__RunDeterministicSimulator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__RunDeterministicSimulator * SOAP_FMAC2 soap_instantiate__ns2__RunDeterministicSimulator(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__RunDeterministicSimulator(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__RunDeterministicSimulator, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_ns2__RunDeterministicSimulator);
		if (size)
			*size = sizeof(_ns2__RunDeterministicSimulator);
		((_ns2__RunDeterministicSimulator*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_ns2__RunDeterministicSimulator[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__RunDeterministicSimulator);
		for (int i = 0; i < n; i++)
			((_ns2__RunDeterministicSimulator*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__RunDeterministicSimulator*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__RunDeterministicSimulator(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__RunDeterministicSimulator %p -> %p\n", q, p));
	*(_ns2__RunDeterministicSimulator*)p = *(_ns2__RunDeterministicSimulator*)q;
}

void ns2__SensitivityParameters::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns2__Function(soap, &this->ns2__SensitivityParameters::function);
	soap_default_ns2__Variable(soap, &this->ns2__SensitivityParameters::variable);
	this->ns2__SensitivityParameters::deltaFactor = 0.001000;
	this->ns2__SensitivityParameters::deltaMinimum = 0.000000;
	/* transient soap skipped */
}

void ns2__SensitivityParameters::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns2__SensitivityParameters::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__SensitivityParameters(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SensitivityParameters(struct soap *soap, const char *tag, int id, const ns2__SensitivityParameters *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SensitivityParameters), type))
		return soap->error;
	if (soap_out_ns2__Function(soap, "function", -1, &(a->ns2__SensitivityParameters::function), ""))
		return soap->error;
	if (soap_out_ns2__Variable(soap, "variable", -1, &(a->ns2__SensitivityParameters::variable), ""))
		return soap->error;
	if (soap_out_float(soap, "deltaFactor", -1, &(a->ns2__SensitivityParameters::deltaFactor), ""))
		return soap->error;
	if (soap_out_float(soap, "deltaMinimum", -1, &(a->ns2__SensitivityParameters::deltaMinimum), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__SensitivityParameters::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__SensitivityParameters(soap, tag, this, type);
}

SOAP_FMAC3 ns2__SensitivityParameters * SOAP_FMAC4 soap_in_ns2__SensitivityParameters(struct soap *soap, const char *tag, ns2__SensitivityParameters *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__SensitivityParameters *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SensitivityParameters, sizeof(ns2__SensitivityParameters), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__SensitivityParameters)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__SensitivityParameters *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_function1 = 1;
	size_t soap_flag_variable1 = 1;
	size_t soap_flag_deltaFactor1 = 1;
	size_t soap_flag_deltaMinimum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_function1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__Function(soap, "function", &(a->ns2__SensitivityParameters::function), "ns2:Function"))
				{	soap_flag_function1--;
					continue;
				}
			if (soap_flag_variable1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__Variable(soap, "variable", &(a->ns2__SensitivityParameters::variable), "ns2:Variable"))
				{	soap_flag_variable1--;
					continue;
				}
			if (soap_flag_deltaFactor1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "deltaFactor", &(a->ns2__SensitivityParameters::deltaFactor), "xsd:float"))
				{	soap_flag_deltaFactor1--;
					continue;
				}
			if (soap_flag_deltaMinimum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "deltaMinimum", &(a->ns2__SensitivityParameters::deltaMinimum), "xsd:float"))
				{	soap_flag_deltaMinimum1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__SensitivityParameters *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SensitivityParameters, 0, sizeof(ns2__SensitivityParameters), 0, soap_copy_ns2__SensitivityParameters);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_function1 > 0 || soap_flag_variable1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__SensitivityParameters::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__SensitivityParameters);
	if (this->soap_out(soap, tag?tag:"ns2:SensitivityParameters", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__SensitivityParameters::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__SensitivityParameters(soap, this, tag, type);
}

SOAP_FMAC3 ns2__SensitivityParameters * SOAP_FMAC4 soap_get_ns2__SensitivityParameters(struct soap *soap, ns2__SensitivityParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SensitivityParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__SensitivityParameters * SOAP_FMAC2 soap_instantiate_ns2__SensitivityParameters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SensitivityParameters(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SensitivityParameters, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns2__SensitivityParameters);
		if (size)
			*size = sizeof(ns2__SensitivityParameters);
		((ns2__SensitivityParameters*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns2__SensitivityParameters[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__SensitivityParameters);
		for (int i = 0; i < n; i++)
			((ns2__SensitivityParameters*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__SensitivityParameters*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SensitivityParameters(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__SensitivityParameters %p -> %p\n", q, p));
	*(ns2__SensitivityParameters*)p = *(ns2__SensitivityParameters*)q;
}

void ns2__DeterministicParameters::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__DeterministicParameters::IntegrateReducedModel = (bool)1;
	this->ns2__DeterministicParameters::RelativeTolerance = 0.000001;
	this->ns2__DeterministicParameters::AbsoluteTolerance = 0.000000;
	soap_default_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::AdamsMaxOrder);
	soap_default_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::BDFMaxOrder);
	soap_default_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::MaxInternalSteps);
	soap_default_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::StepNumber);
	this->ns2__DeterministicParameters::StepSize = 0.010000;
	this->ns2__DeterministicParameters::Duration = 1.000000;
	this->ns2__DeterministicParameters::OutputStartTime = 0.000000;
	this->ns2__DeterministicParameters::sensitivityParameters = NULL;
	this->ns2__DeterministicParameters::updatedModelRequired = (bool)0;
	this->ns2__DeterministicParameters::updatedModelFormatRequired = "CopasiML";
	this->ns2__DeterministicParameters::__union_DeterministicParameters = 0;
	this->ns2__DeterministicParameters::inputFormat = (enum _ns2__DeterministicParameters_inputFormat)0;
	this->ns2__DeterministicParameters::outputFormat = (enum _ns2__DeterministicParameters_outputFormat)1;
	/* transient soap skipped */
}

void ns2__DeterministicParameters::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::AdamsMaxOrder);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::BDFMaxOrder);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::MaxInternalSteps);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->ns2__DeterministicParameters::StepNumber);
	soap_serialize_PointerTons2__SensitivityParameters(soap, &this->ns2__DeterministicParameters::sensitivityParameters);
	soap_embedded(soap, &this->ns2__DeterministicParameters::updatedModelFormatRequired, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns2__DeterministicParameters::updatedModelFormatRequired);
	soap_serialize__ns2__union_DeterministicParameters(soap, this->ns2__DeterministicParameters::__union_DeterministicParameters, &this->ns2__DeterministicParameters::union_DeterministicParameters);
	/* transient soap skipped */
}

int ns2__DeterministicParameters::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__DeterministicParameters(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeterministicParameters(struct soap *soap, const char *tag, int id, const ns2__DeterministicParameters *a, const char *type)
{
	soap_set_attr(soap, "inputFormat", soap__ns2__DeterministicParameters_inputFormat2s(soap, ((ns2__DeterministicParameters*)a)->inputFormat));
	soap_set_attr(soap, "outputFormat", soap__ns2__DeterministicParameters_outputFormat2s(soap, ((ns2__DeterministicParameters*)a)->outputFormat));
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__DeterministicParameters), type))
		return soap->error;
	if (soap_out_bool(soap, "IntegrateReducedModel", -1, &(a->ns2__DeterministicParameters::IntegrateReducedModel), ""))
		return soap->error;
	if (soap_out_float(soap, "RelativeTolerance", -1, &(a->ns2__DeterministicParameters::RelativeTolerance), ""))
		return soap->error;
	if (soap_out_float(soap, "AbsoluteTolerance", -1, &(a->ns2__DeterministicParameters::AbsoluteTolerance), ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "AdamsMaxOrder", -1, &(a->ns2__DeterministicParameters::AdamsMaxOrder), ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "BDFMaxOrder", -1, &(a->ns2__DeterministicParameters::BDFMaxOrder), ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "MaxInternalSteps", -1, &(a->ns2__DeterministicParameters::MaxInternalSteps), ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "StepNumber", -1, &(a->ns2__DeterministicParameters::StepNumber), ""))
		return soap->error;
	if (soap_out_float(soap, "StepSize", -1, &(a->ns2__DeterministicParameters::StepSize), ""))
		return soap->error;
	if (soap_out_float(soap, "Duration", -1, &(a->ns2__DeterministicParameters::Duration), ""))
		return soap->error;
	if (soap_out_float(soap, "OutputStartTime", -1, &(a->ns2__DeterministicParameters::OutputStartTime), ""))
		return soap->error;
	if (soap_out_PointerTons2__SensitivityParameters(soap, "sensitivityParameters", -1, &(a->ns2__DeterministicParameters::sensitivityParameters), ""))
		return soap->error;
	if (soap_out_bool(soap, "updatedModelRequired", -1, &(a->ns2__DeterministicParameters::updatedModelRequired), ""))
		return soap->error;
	if (soap_out_std__string(soap, "updatedModelFormatRequired", -1, &(a->ns2__DeterministicParameters::updatedModelFormatRequired), ""))
		return soap->error;
	if (soap_out__ns2__union_DeterministicParameters(soap, a->ns2__DeterministicParameters::__union_DeterministicParameters, &a->ns2__DeterministicParameters::union_DeterministicParameters))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__DeterministicParameters::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__DeterministicParameters(soap, tag, this, type);
}

SOAP_FMAC3 ns2__DeterministicParameters * SOAP_FMAC4 soap_in_ns2__DeterministicParameters(struct soap *soap, const char *tag, ns2__DeterministicParameters *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__DeterministicParameters *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__DeterministicParameters, sizeof(ns2__DeterministicParameters), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__DeterministicParameters)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__DeterministicParameters *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2_ns2__DeterministicParameters_inputFormat(soap, soap_attr_value(soap, "inputFormat", 0), &((ns2__DeterministicParameters*)a)->inputFormat))
		return NULL;
	if (soap_s2_ns2__DeterministicParameters_outputFormat(soap, soap_attr_value(soap, "outputFormat", 0), &((ns2__DeterministicParameters*)a)->outputFormat))
		return NULL;
	size_t soap_flag_IntegrateReducedModel1 = 1;
	size_t soap_flag_RelativeTolerance1 = 1;
	size_t soap_flag_AbsoluteTolerance1 = 1;
	size_t soap_flag_AdamsMaxOrder1 = 1;
	size_t soap_flag_BDFMaxOrder1 = 1;
	size_t soap_flag_MaxInternalSteps1 = 1;
	size_t soap_flag_StepNumber1 = 1;
	size_t soap_flag_StepSize1 = 1;
	size_t soap_flag_Duration1 = 1;
	size_t soap_flag_OutputStartTime1 = 1;
	size_t soap_flag_sensitivityParameters1 = 1;
	size_t soap_flag_updatedModelRequired1 = 1;
	size_t soap_flag_updatedModelFormatRequired1 = 1;
	size_t soap_flag_union_DeterministicParameters1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IntegrateReducedModel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "IntegrateReducedModel", &(a->ns2__DeterministicParameters::IntegrateReducedModel), "xsd:boolean"))
				{	soap_flag_IntegrateReducedModel1--;
					continue;
				}
			if (soap_flag_RelativeTolerance1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "RelativeTolerance", &(a->ns2__DeterministicParameters::RelativeTolerance), "xsd:float"))
				{	soap_flag_RelativeTolerance1--;
					continue;
				}
			if (soap_flag_AbsoluteTolerance1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "AbsoluteTolerance", &(a->ns2__DeterministicParameters::AbsoluteTolerance), "xsd:float"))
				{	soap_flag_AbsoluteTolerance1--;
					continue;
				}
			if (soap_flag_AdamsMaxOrder1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "AdamsMaxOrder", &(a->ns2__DeterministicParameters::AdamsMaxOrder), "xsd:nonNegativeInteger"))
				{	soap_flag_AdamsMaxOrder1--;
					continue;
				}
			if (soap_flag_BDFMaxOrder1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "BDFMaxOrder", &(a->ns2__DeterministicParameters::BDFMaxOrder), "xsd:nonNegativeInteger"))
				{	soap_flag_BDFMaxOrder1--;
					continue;
				}
			if (soap_flag_MaxInternalSteps1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "MaxInternalSteps", &(a->ns2__DeterministicParameters::MaxInternalSteps), "xsd:nonNegativeInteger"))
				{	soap_flag_MaxInternalSteps1--;
					continue;
				}
			if (soap_flag_StepNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "StepNumber", &(a->ns2__DeterministicParameters::StepNumber), "xsd:nonNegativeInteger"))
				{	soap_flag_StepNumber1--;
					continue;
				}
			if (soap_flag_StepSize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "StepSize", &(a->ns2__DeterministicParameters::StepSize), "xsd:float"))
				{	soap_flag_StepSize1--;
					continue;
				}
			if (soap_flag_Duration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "Duration", &(a->ns2__DeterministicParameters::Duration), "xsd:float"))
				{	soap_flag_Duration1--;
					continue;
				}
			if (soap_flag_OutputStartTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "OutputStartTime", &(a->ns2__DeterministicParameters::OutputStartTime), "xsd:float"))
				{	soap_flag_OutputStartTime1--;
					continue;
				}
			if (soap_flag_sensitivityParameters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__SensitivityParameters(soap, "sensitivityParameters", &(a->ns2__DeterministicParameters::sensitivityParameters), "ns2:SensitivityParameters"))
				{	soap_flag_sensitivityParameters1--;
					continue;
				}
			if (soap_flag_updatedModelRequired1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "updatedModelRequired", &(a->ns2__DeterministicParameters::updatedModelRequired), "xsd:boolean"))
				{	soap_flag_updatedModelRequired1--;
					continue;
				}
			if (soap_flag_updatedModelFormatRequired1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "updatedModelFormatRequired", &(a->ns2__DeterministicParameters::updatedModelFormatRequired), "xsd:string"))
				{	soap_flag_updatedModelFormatRequired1--;
					continue;
				}
			if (soap_flag_union_DeterministicParameters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__ns2__union_DeterministicParameters(soap, &a->ns2__DeterministicParameters::__union_DeterministicParameters, &a->ns2__DeterministicParameters::union_DeterministicParameters))
				{	soap_flag_union_DeterministicParameters1 = 0;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__DeterministicParameters *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__DeterministicParameters, 0, sizeof(ns2__DeterministicParameters), 0, soap_copy_ns2__DeterministicParameters);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdamsMaxOrder1 > 0 || soap_flag_BDFMaxOrder1 > 0 || soap_flag_MaxInternalSteps1 > 0 || soap_flag_StepNumber1 > 0 || soap_flag_union_DeterministicParameters1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__DeterministicParameters::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__DeterministicParameters);
	if (this->soap_out(soap, tag?tag:"ns2:DeterministicParameters", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__DeterministicParameters::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__DeterministicParameters(soap, this, tag, type);
}

SOAP_FMAC3 ns2__DeterministicParameters * SOAP_FMAC4 soap_get_ns2__DeterministicParameters(struct soap *soap, ns2__DeterministicParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__DeterministicParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__DeterministicParameters * SOAP_FMAC2 soap_instantiate_ns2__DeterministicParameters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__DeterministicParameters(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__DeterministicParameters, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns2__DeterministicParameters);
		if (size)
			*size = sizeof(ns2__DeterministicParameters);
		((ns2__DeterministicParameters*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns2__DeterministicParameters[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__DeterministicParameters);
		for (int i = 0; i < n; i++)
			((ns2__DeterministicParameters*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__DeterministicParameters*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DeterministicParameters(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__DeterministicParameters %p -> %p\n", q, p));
	*(ns2__DeterministicParameters*)p = *(ns2__DeterministicParameters*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__nonNegativeInteger), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__nonNegativeInteger(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__nonNegativeInteger, 0, sizeof(std::string), 0, soap_copy_xsd__nonNegativeInteger);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__nonNegativeInteger);
	if (soap_out_xsd__nonNegativeInteger(soap, tag?tag:"xsd:nonNegativeInteger", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__nonNegativeInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__integer, 0, sizeof(std::string), 0, soap_copy_xsd__integer);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new (std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteSimulationResource(struct soap *soap, struct __ns1__deleteSimulationResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__DeleteSimulationResource = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteSimulationResource(struct soap *soap, const struct __ns1__deleteSimulationResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__DeleteSimulationResource(soap, &a->ns3__DeleteSimulationResource);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteSimulationResource(struct soap *soap, const char *tag, int id, const struct __ns1__deleteSimulationResource *a, const char *type)
{
	if (soap_out_PointerTo_ns3__DeleteSimulationResource(soap, "ns3:DeleteSimulationResource", -1, &a->ns3__DeleteSimulationResource, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteSimulationResource * SOAP_FMAC4 soap_in___ns1__deleteSimulationResource(struct soap *soap, const char *tag, struct __ns1__deleteSimulationResource *a, const char *type)
{
	size_t soap_flag_ns3__DeleteSimulationResource = 1;
	short soap_flag;
	a = (struct __ns1__deleteSimulationResource *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteSimulationResource, sizeof(struct __ns1__deleteSimulationResource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteSimulationResource(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__DeleteSimulationResource && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__DeleteSimulationResource(soap, "ns3:DeleteSimulationResource", &a->ns3__DeleteSimulationResource, ""))
				{	soap_flag_ns3__DeleteSimulationResource--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteSimulationResource(struct soap *soap, const struct __ns1__deleteSimulationResource *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__deleteSimulationResource(soap, tag?tag:"-ns1:deleteSimulationResource", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteSimulationResource * SOAP_FMAC4 soap_get___ns1__deleteSimulationResource(struct soap *soap, struct __ns1__deleteSimulationResource *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteSimulationResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__deleteSimulationResource * SOAP_FMAC2 soap_instantiate___ns1__deleteSimulationResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deleteSimulationResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__deleteSimulationResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns1__deleteSimulationResource);
		if (size)
			*size = sizeof(struct __ns1__deleteSimulationResource);
	}
	else
	{	cp->ptr = (void*)new (struct __ns1__deleteSimulationResource[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__deleteSimulationResource);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__deleteSimulationResource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__deleteSimulationResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__deleteSimulationResource %p -> %p\n", q, p));
	*(struct __ns1__deleteSimulationResource*)p = *(struct __ns1__deleteSimulationResource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getResult(struct soap *soap, struct __ns1__getResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetResult = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getResult(struct soap *soap, const struct __ns1__getResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetResult(soap, &a->ns3__GetResult);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getResult(struct soap *soap, const char *tag, int id, const struct __ns1__getResult *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetResult(soap, "ns3:GetResult", -1, &a->ns3__GetResult, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getResult * SOAP_FMAC4 soap_in___ns1__getResult(struct soap *soap, const char *tag, struct __ns1__getResult *a, const char *type)
{
	size_t soap_flag_ns3__GetResult = 1;
	short soap_flag;
	a = (struct __ns1__getResult *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getResult, sizeof(struct __ns1__getResult), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getResult(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetResult && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetResult(soap, "ns3:GetResult", &a->ns3__GetResult, ""))
				{	soap_flag_ns3__GetResult--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getResult(struct soap *soap, const struct __ns1__getResult *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getResult(soap, tag?tag:"-ns1:getResult", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getResult * SOAP_FMAC4 soap_get___ns1__getResult(struct soap *soap, struct __ns1__getResult *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getResult * SOAP_FMAC2 soap_instantiate___ns1__getResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns1__getResult);
		if (size)
			*size = sizeof(struct __ns1__getResult);
	}
	else
	{	cp->ptr = (void*)new (struct __ns1__getResult[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getResult %p -> %p\n", q, p));
	*(struct __ns1__getResult*)p = *(struct __ns1__getResult*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSimulatorStatus(struct soap *soap, struct __ns1__getSimulatorStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetSimulatorStatus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSimulatorStatus(struct soap *soap, const struct __ns1__getSimulatorStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetSimulatorStatus(soap, &a->ns3__GetSimulatorStatus);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSimulatorStatus(struct soap *soap, const char *tag, int id, const struct __ns1__getSimulatorStatus *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetSimulatorStatus(soap, "ns3:GetSimulatorStatus", -1, &a->ns3__GetSimulatorStatus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSimulatorStatus * SOAP_FMAC4 soap_in___ns1__getSimulatorStatus(struct soap *soap, const char *tag, struct __ns1__getSimulatorStatus *a, const char *type)
{
	size_t soap_flag_ns3__GetSimulatorStatus = 1;
	short soap_flag;
	a = (struct __ns1__getSimulatorStatus *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSimulatorStatus, sizeof(struct __ns1__getSimulatorStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSimulatorStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetSimulatorStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetSimulatorStatus(soap, "ns3:GetSimulatorStatus", &a->ns3__GetSimulatorStatus, ""))
				{	soap_flag_ns3__GetSimulatorStatus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSimulatorStatus(struct soap *soap, const struct __ns1__getSimulatorStatus *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getSimulatorStatus(soap, tag?tag:"-ns1:getSimulatorStatus", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSimulatorStatus * SOAP_FMAC4 soap_get___ns1__getSimulatorStatus(struct soap *soap, struct __ns1__getSimulatorStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSimulatorStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSimulatorStatus * SOAP_FMAC2 soap_instantiate___ns1__getSimulatorStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSimulatorStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSimulatorStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns1__getSimulatorStatus);
		if (size)
			*size = sizeof(struct __ns1__getSimulatorStatus);
	}
	else
	{	cp->ptr = (void*)new (struct __ns1__getSimulatorStatus[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getSimulatorStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getSimulatorStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSimulatorStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSimulatorStatus %p -> %p\n", q, p));
	*(struct __ns1__getSimulatorStatus*)p = *(struct __ns1__getSimulatorStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__startDeterministicSimulator(struct soap *soap, struct __ns1__startDeterministicSimulator *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__StartDeterministicSimulator = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__startDeterministicSimulator(struct soap *soap, const struct __ns1__startDeterministicSimulator *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__StartDeterministicSimulator(soap, &a->ns2__StartDeterministicSimulator);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__startDeterministicSimulator(struct soap *soap, const char *tag, int id, const struct __ns1__startDeterministicSimulator *a, const char *type)
{
	if (soap_out_PointerTo_ns2__StartDeterministicSimulator(soap, "ns2:StartDeterministicSimulator", -1, &a->ns2__StartDeterministicSimulator, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__startDeterministicSimulator * SOAP_FMAC4 soap_in___ns1__startDeterministicSimulator(struct soap *soap, const char *tag, struct __ns1__startDeterministicSimulator *a, const char *type)
{
	size_t soap_flag_ns2__StartDeterministicSimulator = 1;
	short soap_flag;
	a = (struct __ns1__startDeterministicSimulator *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__startDeterministicSimulator, sizeof(struct __ns1__startDeterministicSimulator), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__startDeterministicSimulator(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__StartDeterministicSimulator && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__StartDeterministicSimulator(soap, "ns2:StartDeterministicSimulator", &a->ns2__StartDeterministicSimulator, ""))
				{	soap_flag_ns2__StartDeterministicSimulator--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__startDeterministicSimulator(struct soap *soap, const struct __ns1__startDeterministicSimulator *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__startDeterministicSimulator(soap, tag?tag:"-ns1:startDeterministicSimulator", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__startDeterministicSimulator * SOAP_FMAC4 soap_get___ns1__startDeterministicSimulator(struct soap *soap, struct __ns1__startDeterministicSimulator *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__startDeterministicSimulator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__startDeterministicSimulator * SOAP_FMAC2 soap_instantiate___ns1__startDeterministicSimulator(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__startDeterministicSimulator(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__startDeterministicSimulator, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns1__startDeterministicSimulator);
		if (size)
			*size = sizeof(struct __ns1__startDeterministicSimulator);
	}
	else
	{	cp->ptr = (void*)new (struct __ns1__startDeterministicSimulator[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__startDeterministicSimulator);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__startDeterministicSimulator*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__startDeterministicSimulator(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__startDeterministicSimulator %p -> %p\n", q, p));
	*(struct __ns1__startDeterministicSimulator*)p = *(struct __ns1__startDeterministicSimulator*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runDeterministicSimulator(struct soap *soap, struct __ns1__runDeterministicSimulator *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__RunDeterministicSimulator = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runDeterministicSimulator(struct soap *soap, const struct __ns1__runDeterministicSimulator *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__RunDeterministicSimulator(soap, &a->ns2__RunDeterministicSimulator);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runDeterministicSimulator(struct soap *soap, const char *tag, int id, const struct __ns1__runDeterministicSimulator *a, const char *type)
{
	if (soap_out_PointerTo_ns2__RunDeterministicSimulator(soap, "ns2:RunDeterministicSimulator", -1, &a->ns2__RunDeterministicSimulator, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__runDeterministicSimulator * SOAP_FMAC4 soap_in___ns1__runDeterministicSimulator(struct soap *soap, const char *tag, struct __ns1__runDeterministicSimulator *a, const char *type)
{
	size_t soap_flag_ns2__RunDeterministicSimulator = 1;
	short soap_flag;
	a = (struct __ns1__runDeterministicSimulator *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__runDeterministicSimulator, sizeof(struct __ns1__runDeterministicSimulator), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__runDeterministicSimulator(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__RunDeterministicSimulator && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__RunDeterministicSimulator(soap, "ns2:RunDeterministicSimulator", &a->ns2__RunDeterministicSimulator, ""))
				{	soap_flag_ns2__RunDeterministicSimulator--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runDeterministicSimulator(struct soap *soap, const struct __ns1__runDeterministicSimulator *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__runDeterministicSimulator(soap, tag?tag:"-ns1:runDeterministicSimulator", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__runDeterministicSimulator * SOAP_FMAC4 soap_get___ns1__runDeterministicSimulator(struct soap *soap, struct __ns1__runDeterministicSimulator *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__runDeterministicSimulator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__runDeterministicSimulator * SOAP_FMAC2 soap_instantiate___ns1__runDeterministicSimulator(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__runDeterministicSimulator(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__runDeterministicSimulator, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns1__runDeterministicSimulator);
		if (size)
			*size = sizeof(struct __ns1__runDeterministicSimulator);
	}
	else
	{	cp->ptr = (void*)new (struct __ns1__runDeterministicSimulator[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__runDeterministicSimulator);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__runDeterministicSimulator*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__runDeterministicSimulator(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__runDeterministicSimulator %p -> %p\n", q, p));
	*(struct __ns1__runDeterministicSimulator*)p = *(struct __ns1__runDeterministicSimulator*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__ServiceFault = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__ServiceFault(soap, &a->ns3__ServiceFault);
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTo_ns3__ServiceFault(soap, "ns3:ServiceFault", -1, &a->ns3__ServiceFault, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns3__ServiceFault = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__ServiceFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__ServiceFault(soap, "ns3:ServiceFault", &a->ns3__ServiceFault, ""))
				{	soap_flag_ns3__ServiceFault--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_DeterministicParameters(struct soap *soap, int choice, const union _ns2__union_DeterministicParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__ns2__union_DeterministicParameters_copasiml:
		soap_serialize_PointerTostd__string(soap, &a->copasiml);
		break;
	case SOAP_UNION__ns2__union_DeterministicParameters_sbml:
		soap_serialize_PointerTostd__string(soap, &a->sbml);
		break;
	default:
		break;
	}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_DeterministicParameters(struct soap *soap, int choice, const union _ns2__union_DeterministicParameters *a)
{
	switch (choice)
	{
	case SOAP_UNION__ns2__union_DeterministicParameters_copasiml:
		return soap_out_PointerTostd__string(soap, "copasiml", -1, &a->copasiml, "");
	case SOAP_UNION__ns2__union_DeterministicParameters_sbml:
		return soap_out_PointerTostd__string(soap, "sbml", -1, &a->sbml, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _ns2__union_DeterministicParameters * SOAP_FMAC4 soap_in__ns2__union_DeterministicParameters(struct soap *soap, int *choice, union _ns2__union_DeterministicParameters *a)
{	soap->error = SOAP_TAG_MISMATCH;
	a->copasiml = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTostd__string(soap, "copasiml", &a->copasiml, "xsd:string"))
	{	*choice = SOAP_UNION__ns2__union_DeterministicParameters_copasiml;
		return a;
	}
	a->sbml = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTostd__string(soap, "sbml", &a->sbml, "xsd:string"))
	{	*choice = SOAP_UNION__ns2__union_DeterministicParameters_sbml;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__DeleteSimulationResourceResponse(struct soap *soap, _ns3__DeleteSimulationResourceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__DeleteSimulationResourceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__DeleteSimulationResourceResponse(struct soap *soap, const char *tag, int id, _ns3__DeleteSimulationResourceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__DeleteSimulationResourceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__DeleteSimulationResourceResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__DeleteSimulationResourceResponse(struct soap *soap, const char *tag, _ns3__DeleteSimulationResourceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__DeleteSimulationResourceResponse **)soap_malloc(soap, sizeof(_ns3__DeleteSimulationResourceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__DeleteSimulationResourceResponse *)soap_instantiate__ns3__DeleteSimulationResourceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__DeleteSimulationResourceResponse ** p = (_ns3__DeleteSimulationResourceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__DeleteSimulationResourceResponse, sizeof(_ns3__DeleteSimulationResourceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__DeleteSimulationResourceResponse(struct soap *soap, _ns3__DeleteSimulationResourceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__DeleteSimulationResourceResponse);
	if (soap_out_PointerTo_ns3__DeleteSimulationResourceResponse(soap, tag?tag:"ns3:DeleteSimulationResourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__DeleteSimulationResourceResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__DeleteSimulationResourceResponse(struct soap *soap, _ns3__DeleteSimulationResourceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__DeleteSimulationResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__DeleteSimulationResource(struct soap *soap, _ns3__DeleteSimulationResource *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__DeleteSimulationResource))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__DeleteSimulationResource(struct soap *soap, const char *tag, int id, _ns3__DeleteSimulationResource *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__DeleteSimulationResource);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__DeleteSimulationResource ** SOAP_FMAC4 soap_in_PointerTo_ns3__DeleteSimulationResource(struct soap *soap, const char *tag, _ns3__DeleteSimulationResource **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__DeleteSimulationResource **)soap_malloc(soap, sizeof(_ns3__DeleteSimulationResource *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__DeleteSimulationResource *)soap_instantiate__ns3__DeleteSimulationResource(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__DeleteSimulationResource ** p = (_ns3__DeleteSimulationResource **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__DeleteSimulationResource, sizeof(_ns3__DeleteSimulationResource), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__DeleteSimulationResource(struct soap *soap, _ns3__DeleteSimulationResource *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__DeleteSimulationResource);
	if (soap_out_PointerTo_ns3__DeleteSimulationResource(soap, tag?tag:"ns3:DeleteSimulationResource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__DeleteSimulationResource ** SOAP_FMAC4 soap_get_PointerTo_ns3__DeleteSimulationResource(struct soap *soap, _ns3__DeleteSimulationResource **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__DeleteSimulationResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetResultResponse(struct soap *soap, _ns3__GetResultResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetResultResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetResultResponse(struct soap *soap, const char *tag, int id, _ns3__GetResultResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetResultResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetResultResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetResultResponse(struct soap *soap, const char *tag, _ns3__GetResultResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetResultResponse **)soap_malloc(soap, sizeof(_ns3__GetResultResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetResultResponse *)soap_instantiate__ns3__GetResultResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetResultResponse ** p = (_ns3__GetResultResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetResultResponse, sizeof(_ns3__GetResultResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetResultResponse(struct soap *soap, _ns3__GetResultResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetResultResponse);
	if (soap_out_PointerTo_ns3__GetResultResponse(soap, tag?tag:"ns3:GetResultResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetResultResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetResultResponse(struct soap *soap, _ns3__GetResultResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetResultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetResult(struct soap *soap, _ns3__GetResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetResult(struct soap *soap, const char *tag, int id, _ns3__GetResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetResult ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetResult(struct soap *soap, const char *tag, _ns3__GetResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetResult **)soap_malloc(soap, sizeof(_ns3__GetResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetResult *)soap_instantiate__ns3__GetResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetResult ** p = (_ns3__GetResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetResult, sizeof(_ns3__GetResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetResult(struct soap *soap, _ns3__GetResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetResult);
	if (soap_out_PointerTo_ns3__GetResult(soap, tag?tag:"ns3:GetResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetResult ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetResult(struct soap *soap, _ns3__GetResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetSimulatorStatusResponse(struct soap *soap, _ns3__GetSimulatorStatusResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetSimulatorStatusResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetSimulatorStatusResponse(struct soap *soap, const char *tag, int id, _ns3__GetSimulatorStatusResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetSimulatorStatusResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetSimulatorStatusResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetSimulatorStatusResponse(struct soap *soap, const char *tag, _ns3__GetSimulatorStatusResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetSimulatorStatusResponse **)soap_malloc(soap, sizeof(_ns3__GetSimulatorStatusResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetSimulatorStatusResponse *)soap_instantiate__ns3__GetSimulatorStatusResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetSimulatorStatusResponse ** p = (_ns3__GetSimulatorStatusResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetSimulatorStatusResponse, sizeof(_ns3__GetSimulatorStatusResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetSimulatorStatusResponse(struct soap *soap, _ns3__GetSimulatorStatusResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetSimulatorStatusResponse);
	if (soap_out_PointerTo_ns3__GetSimulatorStatusResponse(soap, tag?tag:"ns3:GetSimulatorStatusResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetSimulatorStatusResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetSimulatorStatusResponse(struct soap *soap, _ns3__GetSimulatorStatusResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetSimulatorStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetSimulatorStatus(struct soap *soap, _ns3__GetSimulatorStatus *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetSimulatorStatus))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetSimulatorStatus(struct soap *soap, const char *tag, int id, _ns3__GetSimulatorStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetSimulatorStatus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetSimulatorStatus ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetSimulatorStatus(struct soap *soap, const char *tag, _ns3__GetSimulatorStatus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetSimulatorStatus **)soap_malloc(soap, sizeof(_ns3__GetSimulatorStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetSimulatorStatus *)soap_instantiate__ns3__GetSimulatorStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetSimulatorStatus ** p = (_ns3__GetSimulatorStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetSimulatorStatus, sizeof(_ns3__GetSimulatorStatus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetSimulatorStatus(struct soap *soap, _ns3__GetSimulatorStatus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetSimulatorStatus);
	if (soap_out_PointerTo_ns3__GetSimulatorStatus(soap, tag?tag:"ns3:GetSimulatorStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetSimulatorStatus ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetSimulatorStatus(struct soap *soap, _ns3__GetSimulatorStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetSimulatorStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__StartDeterministicSimulatorResponse(struct soap *soap, _ns2__StartDeterministicSimulatorResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__StartDeterministicSimulatorResponse(struct soap *soap, const char *tag, int id, _ns2__StartDeterministicSimulatorResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulatorResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__StartDeterministicSimulatorResponse(struct soap *soap, const char *tag, _ns2__StartDeterministicSimulatorResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__StartDeterministicSimulatorResponse **)soap_malloc(soap, sizeof(_ns2__StartDeterministicSimulatorResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__StartDeterministicSimulatorResponse *)soap_instantiate__ns2__StartDeterministicSimulatorResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__StartDeterministicSimulatorResponse ** p = (_ns2__StartDeterministicSimulatorResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__StartDeterministicSimulatorResponse, sizeof(_ns2__StartDeterministicSimulatorResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__StartDeterministicSimulatorResponse(struct soap *soap, _ns2__StartDeterministicSimulatorResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulatorResponse);
	if (soap_out_PointerTo_ns2__StartDeterministicSimulatorResponse(soap, tag?tag:"ns2:StartDeterministicSimulatorResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulatorResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__StartDeterministicSimulatorResponse(struct soap *soap, _ns2__StartDeterministicSimulatorResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__StartDeterministicSimulatorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__StartDeterministicSimulator(struct soap *soap, _ns2__StartDeterministicSimulator *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__StartDeterministicSimulator))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__StartDeterministicSimulator(struct soap *soap, const char *tag, int id, _ns2__StartDeterministicSimulator *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__StartDeterministicSimulator);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulator ** SOAP_FMAC4 soap_in_PointerTo_ns2__StartDeterministicSimulator(struct soap *soap, const char *tag, _ns2__StartDeterministicSimulator **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__StartDeterministicSimulator **)soap_malloc(soap, sizeof(_ns2__StartDeterministicSimulator *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__StartDeterministicSimulator *)soap_instantiate__ns2__StartDeterministicSimulator(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__StartDeterministicSimulator ** p = (_ns2__StartDeterministicSimulator **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__StartDeterministicSimulator, sizeof(_ns2__StartDeterministicSimulator), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__StartDeterministicSimulator(struct soap *soap, _ns2__StartDeterministicSimulator *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__StartDeterministicSimulator);
	if (soap_out_PointerTo_ns2__StartDeterministicSimulator(soap, tag?tag:"ns2:StartDeterministicSimulator", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__StartDeterministicSimulator ** SOAP_FMAC4 soap_get_PointerTo_ns2__StartDeterministicSimulator(struct soap *soap, _ns2__StartDeterministicSimulator **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__StartDeterministicSimulator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__RunDeterministicSimulatorResponse(struct soap *soap, _ns2__RunDeterministicSimulatorResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__RunDeterministicSimulatorResponse(struct soap *soap, const char *tag, int id, _ns2__RunDeterministicSimulatorResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulatorResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__RunDeterministicSimulatorResponse(struct soap *soap, const char *tag, _ns2__RunDeterministicSimulatorResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__RunDeterministicSimulatorResponse **)soap_malloc(soap, sizeof(_ns2__RunDeterministicSimulatorResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__RunDeterministicSimulatorResponse *)soap_instantiate__ns2__RunDeterministicSimulatorResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__RunDeterministicSimulatorResponse ** p = (_ns2__RunDeterministicSimulatorResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__RunDeterministicSimulatorResponse, sizeof(_ns2__RunDeterministicSimulatorResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__RunDeterministicSimulatorResponse(struct soap *soap, _ns2__RunDeterministicSimulatorResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulatorResponse);
	if (soap_out_PointerTo_ns2__RunDeterministicSimulatorResponse(soap, tag?tag:"ns2:RunDeterministicSimulatorResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulatorResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__RunDeterministicSimulatorResponse(struct soap *soap, _ns2__RunDeterministicSimulatorResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__RunDeterministicSimulatorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__RunDeterministicSimulator(struct soap *soap, _ns2__RunDeterministicSimulator *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__RunDeterministicSimulator))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__RunDeterministicSimulator(struct soap *soap, const char *tag, int id, _ns2__RunDeterministicSimulator *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__RunDeterministicSimulator);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulator ** SOAP_FMAC4 soap_in_PointerTo_ns2__RunDeterministicSimulator(struct soap *soap, const char *tag, _ns2__RunDeterministicSimulator **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__RunDeterministicSimulator **)soap_malloc(soap, sizeof(_ns2__RunDeterministicSimulator *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__RunDeterministicSimulator *)soap_instantiate__ns2__RunDeterministicSimulator(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__RunDeterministicSimulator ** p = (_ns2__RunDeterministicSimulator **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__RunDeterministicSimulator, sizeof(_ns2__RunDeterministicSimulator), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__RunDeterministicSimulator(struct soap *soap, _ns2__RunDeterministicSimulator *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__RunDeterministicSimulator);
	if (soap_out_PointerTo_ns2__RunDeterministicSimulator(soap, tag?tag:"ns2:RunDeterministicSimulator", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__RunDeterministicSimulator ** SOAP_FMAC4 soap_get_PointerTo_ns2__RunDeterministicSimulator(struct soap *soap, _ns2__RunDeterministicSimulator **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__RunDeterministicSimulator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__ServiceFault(struct soap *soap, _ns3__ServiceFault *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__ServiceFault))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__ServiceFault(struct soap *soap, const char *tag, int id, _ns3__ServiceFault *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__ServiceFault);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__ServiceFault ** SOAP_FMAC4 soap_in_PointerTo_ns3__ServiceFault(struct soap *soap, const char *tag, _ns3__ServiceFault **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__ServiceFault **)soap_malloc(soap, sizeof(_ns3__ServiceFault *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__ServiceFault *)soap_instantiate__ns3__ServiceFault(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__ServiceFault ** p = (_ns3__ServiceFault **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__ServiceFault, sizeof(_ns3__ServiceFault), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__ServiceFault(struct soap *soap, _ns3__ServiceFault *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__ServiceFault);
	if (soap_out_PointerTo_ns3__ServiceFault(soap, tag?tag:"ns3:ServiceFault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__ServiceFault ** SOAP_FMAC4 soap_get_PointerTo_ns3__ServiceFault(struct soap *soap, _ns3__ServiceFault **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__ServiceFault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Status(struct soap *soap, ns3__Status *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__Status))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Status(struct soap *soap, const char *tag, int id, ns3__Status *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__Status);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__Status ** SOAP_FMAC4 soap_in_PointerTons3__Status(struct soap *soap, const char *tag, ns3__Status **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__Status **)soap_malloc(soap, sizeof(ns3__Status *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__Status *)soap_instantiate_ns3__Status(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__Status ** p = (ns3__Status **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__Status, sizeof(ns3__Status), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Status(struct soap *soap, ns3__Status *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__Status);
	if (soap_out_PointerTons3__Status(soap, tag?tag:"ns3:Status", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__Status ** SOAP_FMAC4 soap_get_PointerTons3__Status(struct soap *soap, ns3__Status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__User(struct soap *soap, ns3__User *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__User))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__User(struct soap *soap, const char *tag, int id, ns3__User *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__User);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__User ** SOAP_FMAC4 soap_in_PointerTons3__User(struct soap *soap, const char *tag, ns3__User **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__User **)soap_malloc(soap, sizeof(ns3__User *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__User *)soap_instantiate_ns3__User(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__User ** p = (ns3__User **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__User, sizeof(ns3__User), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__User(struct soap *soap, ns3__User *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__User);
	if (soap_out_PointerTons3__User(soap, tag?tag:"ns3:User", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__User ** SOAP_FMAC4 soap_get_PointerTons3__User(struct soap *soap, ns3__User **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__User(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OutputResult(struct soap *soap, ns3__OutputResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__OutputResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OutputResult(struct soap *soap, const char *tag, int id, ns3__OutputResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__OutputResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__OutputResult ** SOAP_FMAC4 soap_in_PointerTons3__OutputResult(struct soap *soap, const char *tag, ns3__OutputResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__OutputResult **)soap_malloc(soap, sizeof(ns3__OutputResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__OutputResult *)soap_instantiate_ns3__OutputResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__OutputResult ** p = (ns3__OutputResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__OutputResult, sizeof(ns3__OutputResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OutputResult(struct soap *soap, ns3__OutputResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__OutputResult);
	if (soap_out_PointerTons3__OutputResult(soap, tag?tag:"ns3:OutputResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__OutputResult ** SOAP_FMAC4 soap_get_PointerTons3__OutputResult(struct soap *soap, ns3__OutputResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__OutputResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeterministicParameters(struct soap *soap, ns2__DeterministicParameters *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__DeterministicParameters))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeterministicParameters(struct soap *soap, const char *tag, int id, ns2__DeterministicParameters *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__DeterministicParameters);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__DeterministicParameters ** SOAP_FMAC4 soap_in_PointerTons2__DeterministicParameters(struct soap *soap, const char *tag, ns2__DeterministicParameters **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__DeterministicParameters **)soap_malloc(soap, sizeof(ns2__DeterministicParameters *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__DeterministicParameters *)soap_instantiate_ns2__DeterministicParameters(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__DeterministicParameters ** p = (ns2__DeterministicParameters **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__DeterministicParameters, sizeof(ns2__DeterministicParameters), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeterministicParameters(struct soap *soap, ns2__DeterministicParameters *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__DeterministicParameters);
	if (soap_out_PointerTons2__DeterministicParameters(soap, tag?tag:"ns2:DeterministicParameters", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__DeterministicParameters ** SOAP_FMAC4 soap_get_PointerTons2__DeterministicParameters(struct soap *soap, ns2__DeterministicParameters **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__DeterministicParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SensitivityParameters(struct soap *soap, ns2__SensitivityParameters *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__SensitivityParameters))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SensitivityParameters(struct soap *soap, const char *tag, int id, ns2__SensitivityParameters *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__SensitivityParameters);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__SensitivityParameters ** SOAP_FMAC4 soap_in_PointerTons2__SensitivityParameters(struct soap *soap, const char *tag, ns2__SensitivityParameters **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__SensitivityParameters **)soap_malloc(soap, sizeof(ns2__SensitivityParameters *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__SensitivityParameters *)soap_instantiate_ns2__SensitivityParameters(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__SensitivityParameters ** p = (ns2__SensitivityParameters **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__SensitivityParameters, sizeof(ns2__SensitivityParameters), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SensitivityParameters(struct soap *soap, ns2__SensitivityParameters *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__SensitivityParameters);
	if (soap_out_PointerTons2__SensitivityParameters(soap, tag?tag:"ns2:SensitivityParameters", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__SensitivityParameters ** SOAP_FMAC4 soap_get_PointerTons2__SensitivityParameters(struct soap *soap, ns2__SensitivityParameters **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__SensitivityParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
