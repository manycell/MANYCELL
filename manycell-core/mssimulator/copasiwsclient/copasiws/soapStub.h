/* soapStub.h
   Generated by gSOAP 2.7.15 from timecoursews.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://timecoursews.services.copasiws.copasi.org/types"
#define SOAP_NAMESPACE_OF_ns3	"http://copasi.org/copasiws/schemas"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns2__Function
#define SOAP_TYPE_ns2__Function (29)
/* ns2:Function */
enum ns2__Function {ns2__Function__Concentration_x0020Fluxes_x0020of_x0020Reaction = 0, ns2__Function__Particle_x0020Fluxes_x0020of_x0020Reactions = 1, ns2__Function__Non_Constant_x0020Concentration_x0020of_x0020Species = 2};
#endif

#ifndef SOAP_TYPE_ns2__Variable
#define SOAP_TYPE_ns2__Variable (30)
/* ns2:Variable */
enum ns2__Variable {ns2__Variable__All_x0020Parameter_x0020Values = 0, ns2__Variable__Initial_x0020Concentration = 1};
#endif

#ifndef SOAP_TYPE_ns3__StatusCode
#define SOAP_TYPE_ns3__StatusCode (31)
/* ns3:StatusCode */
enum ns3__StatusCode {ns3__StatusCode__SUCCESS = 0, ns3__StatusCode__FAIL = 1, ns3__StatusCode__INCORRECTOBJECTMAP = 2, ns3__StatusCode__UNKNOWNTRANSACTION = 3, ns3__StatusCode__NOEXPERIMENTALDATA = 4, ns3__StatusCode__INCOMPLETEDATA = 5, ns3__StatusCode__ALREADYEXISTS = 6, ns3__StatusCode__NO_USCOREOF_USCORERESOURCES_USCOREEXCEEDED = 7, ns3__StatusCode__COMPLETED = 8, ns3__StatusCode__SCHEDULE_USCORETO_USCORESTART = 9, ns3__StatusCode__RUNNING = 10, ns3__StatusCode__UNKNOWN = 11, ns3__StatusCode__SUSPENDED = 12, ns3__StatusCode__RESOURCE_USCOREALREADY_USCOREDELETED = 13, ns3__StatusCode__CANNOT_USCOREBE_USCORESTARTED = 14};
#endif

#ifndef SOAP_TYPE__ns2__DeterministicParameters_inputFormat
#define SOAP_TYPE__ns2__DeterministicParameters_inputFormat (37)
/* ns2:DeterministicParameters-inputFormat */
enum _ns2__DeterministicParameters_inputFormat {_ns2__DeterministicParameters_inputFormat__SBML = 0, _ns2__DeterministicParameters_inputFormat__CopasiML = 1};
#endif

#ifndef SOAP_TYPE__ns2__DeterministicParameters_outputFormat
#define SOAP_TYPE__ns2__DeterministicParameters_outputFormat (38)
/* ns2:DeterministicParameters-outputFormat */
enum _ns2__DeterministicParameters_outputFormat {_ns2__DeterministicParameters_outputFormat__text = 0, _ns2__DeterministicParameters_outputFormat__sbrml = 1};
#endif

#ifndef SOAP_TYPE__ns3__OutputResult_format
#define SOAP_TYPE__ns3__OutputResult_format (45)
/* ns3:OutputResult-format */
enum _ns3__OutputResult_format {_ns3__OutputResult_format__text = 0, _ns3__OutputResult_format__sbrml = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE__ns2__union_DeterministicParameters
#define SOAP_TYPE__ns2__union_DeterministicParameters (36)
/* xsd:choice */
union _ns2__union_DeterministicParameters
{
#define SOAP_UNION__ns2__union_DeterministicParameters_copasiml	(1)
	std::string *copasiml;
#define SOAP_UNION__ns2__union_DeterministicParameters_sbml	(2)
	std::string *sbml;
};
#endif

#ifndef SOAP_TYPE_ns2__DeterministicParameters
#define SOAP_TYPE_ns2__DeterministicParameters (11)
/* ns2:DeterministicParameters */
class SOAP_CMAC ns2__DeterministicParameters
{
public:
	bool IntegrateReducedModel;	/* required element of type xsd:boolean */
	float RelativeTolerance;	/* required element of type xsd:float */
	float AbsoluteTolerance;	/* required element of type xsd:float */
	std::string AdamsMaxOrder;	/* required element of type xsd:nonNegativeInteger */
	std::string BDFMaxOrder;	/* required element of type xsd:nonNegativeInteger */
	std::string MaxInternalSteps;	/* required element of type xsd:nonNegativeInteger */
	std::string StepNumber;	/* required element of type xsd:nonNegativeInteger */
	float StepSize;	/* required element of type xsd:float */
	float Duration;	/* required element of type xsd:float */
	float OutputStartTime;	/* required element of type xsd:float */
	class ns2__SensitivityParameters *sensitivityParameters;	/* optional element of type ns2:SensitivityParameters */
	bool updatedModelRequired;	/* required element of type xsd:boolean */
	std::string updatedModelFormatRequired;	/* optional element of type xsd:string */
	int __union_DeterministicParameters;	/* union discriminant (of union defined below) */
	union _ns2__union_DeterministicParameters union_DeterministicParameters;	/* required element of type xsd:choice */
	enum _ns2__DeterministicParameters_inputFormat inputFormat;	/* optional attribute */
	enum _ns2__DeterministicParameters_outputFormat outputFormat;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns2__DeterministicParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__DeterministicParameters() : IntegrateReducedModel((bool)0), RelativeTolerance(0), AbsoluteTolerance(0), StepSize(0), Duration(0), OutputStartTime(0), sensitivityParameters(NULL), updatedModelRequired((bool)0), __union_DeterministicParameters(0), inputFormat((enum _ns2__DeterministicParameters_inputFormat)0), outputFormat((enum _ns2__DeterministicParameters_outputFormat)0), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns2__DeterministicParameters() { }
};
#endif

#ifndef SOAP_TYPE_ns2__SensitivityParameters
#define SOAP_TYPE_ns2__SensitivityParameters (12)
/* ns2:SensitivityParameters */
class SOAP_CMAC ns2__SensitivityParameters
{
public:
	enum ns2__Function function;	/* required element of type ns2:Function */
	enum ns2__Variable variable;	/* required element of type ns2:Variable */
	float deltaFactor;	/* required element of type xsd:float */
	float deltaMinimum;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__SensitivityParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__SensitivityParameters() : function((enum ns2__Function)0), variable((enum ns2__Variable)0), deltaFactor(0), deltaMinimum(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns2__SensitivityParameters() { }
};
#endif

#ifndef SOAP_TYPE__ns2__RunDeterministicSimulator
#define SOAP_TYPE__ns2__RunDeterministicSimulator (13)
/* ns2:RunDeterministicSimulator */
class SOAP_CMAC _ns2__RunDeterministicSimulator
{
public:
	ns2__DeterministicParameters *parameters;	/* required element of type ns2:DeterministicParameters */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns2__RunDeterministicSimulator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__RunDeterministicSimulator() : parameters(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns2__RunDeterministicSimulator() { }
};
#endif

#ifndef SOAP_TYPE__ns2__RunDeterministicSimulatorResponse
#define SOAP_TYPE__ns2__RunDeterministicSimulatorResponse (14)
/* ns2:RunDeterministicSimulatorResponse */
class SOAP_CMAC _ns2__RunDeterministicSimulatorResponse
{
public:
	class ns3__OutputResult *outputResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:OutputResult */
	std::string sensitityResult;	/* required element of type xsd:string */
	std::string *updatedModel;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns2__RunDeterministicSimulatorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__RunDeterministicSimulatorResponse() : outputResult(NULL), updatedModel(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns2__RunDeterministicSimulatorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__StartDeterministicSimulator
#define SOAP_TYPE__ns2__StartDeterministicSimulator (15)
/* ns2:StartDeterministicSimulator */
class SOAP_CMAC _ns2__StartDeterministicSimulator
{
public:
	class ns3__User *user;	/* required element of type ns3:User */
	ns2__DeterministicParameters *parameters;	/* required element of type ns2:DeterministicParameters */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns2__StartDeterministicSimulator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__StartDeterministicSimulator() : user(NULL), parameters(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns2__StartDeterministicSimulator() { }
};
#endif

#ifndef SOAP_TYPE__ns2__StartDeterministicSimulatorResponse
#define SOAP_TYPE__ns2__StartDeterministicSimulatorResponse (16)
/* ns2:StartDeterministicSimulatorResponse */
class SOAP_CMAC _ns2__StartDeterministicSimulatorResponse
{
public:
	class ns3__Status *status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:Status */
	int resourceId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns2__StartDeterministicSimulatorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__StartDeterministicSimulatorResponse() : status(NULL), resourceId(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns2__StartDeterministicSimulatorResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns3__Status
#define SOAP_TYPE_ns3__Status (17)
/* ns3:Status */
class SOAP_CMAC ns3__Status
{
public:
	enum ns3__StatusCode code;	/* required element of type ns3:StatusCode */
	std::string *message;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns3__Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__Status() : code((enum ns3__StatusCode)0), message(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns3__Status() { }
};
#endif

#ifndef SOAP_TYPE_ns3__Transaction
#define SOAP_TYPE_ns3__Transaction (18)
/* ns3:Transaction */
class SOAP_CMAC ns3__Transaction
{
public:
	int id;	/* required element of type xsd:int */
	int *duration;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns3__Transaction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__Transaction() : id(0), duration(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns3__Transaction() { }
};
#endif

#ifndef SOAP_TYPE_ns3__User
#define SOAP_TYPE_ns3__User (19)
/* ns3:User */
class SOAP_CMAC ns3__User
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns3__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__User() : password(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns3__User() { }
};
#endif

#ifndef SOAP_TYPE_ns3__OutputResult
#define SOAP_TYPE_ns3__OutputResult (20)
/* ns3:OutputResult */
class SOAP_CMAC ns3__OutputResult
{
public:
	std::string result;	/* required element of type xsd:string */
	enum _ns3__OutputResult_format format;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns3__OutputResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__OutputResult() : format((enum _ns3__OutputResult_format)0), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns3__OutputResult() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetSimulatorStatus
#define SOAP_TYPE__ns3__GetSimulatorStatus (21)
/* ns3:GetSimulatorStatus */
class SOAP_CMAC _ns3__GetSimulatorStatus
{
public:
	std::string userId;	/* required element of type xsd:string */
	int resourceId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns3__GetSimulatorStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetSimulatorStatus() : resourceId(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__GetSimulatorStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetSimulatorStatusResponse
#define SOAP_TYPE__ns3__GetSimulatorStatusResponse (22)
/* ns3:GetSimulatorStatusResponse */
class SOAP_CMAC _ns3__GetSimulatorStatusResponse
{
public:
	ns3__Status *status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns3__GetSimulatorStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetSimulatorStatusResponse() : status(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__GetSimulatorStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetResult
#define SOAP_TYPE__ns3__GetResult (23)
/* ns3:GetResult */
class SOAP_CMAC _ns3__GetResult
{
public:
	std::string userId;	/* required element of type xsd:string */
	int resourceId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns3__GetResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetResult() : resourceId(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__GetResult() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetResultResponse
#define SOAP_TYPE__ns3__GetResultResponse (24)
/* ns3:GetResultResponse */
class SOAP_CMAC _ns3__GetResultResponse
{
public:
	ns3__OutputResult *outputResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:OutputResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns3__GetResultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetResultResponse() : outputResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__GetResultResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteSimulationResource
#define SOAP_TYPE__ns3__DeleteSimulationResource (25)
/* ns3:DeleteSimulationResource */
class SOAP_CMAC _ns3__DeleteSimulationResource
{
public:
	std::string userId;	/* required element of type xsd:string */
	int resourceId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns3__DeleteSimulationResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteSimulationResource() : resourceId(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__DeleteSimulationResource() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteSimulationResourceResponse
#define SOAP_TYPE__ns3__DeleteSimulationResourceResponse (26)
/* ns3:DeleteSimulationResourceResponse */
class SOAP_CMAC _ns3__DeleteSimulationResourceResponse
{
public:
	ns3__Status *status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns3__DeleteSimulationResourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteSimulationResourceResponse() : status(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__DeleteSimulationResourceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ServiceFault
#define SOAP_TYPE__ns3__ServiceFault (27)
/* ns3:ServiceFault */
class SOAP_CMAC _ns3__ServiceFault
{
public:
	std::string errorMessage;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns3__ServiceFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ServiceFault() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__ServiceFault() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ResourceProperty
#define SOAP_TYPE__ns3__ResourceProperty (28)
/* ns3:ResourceProperty */
class SOAP_CMAC _ns3__ResourceProperty
{
public:
	std::string resourceId;	/* required element of type xsd:string */
	std::string modelFile;	/* required element of type xsd:string */
	std::string resultFile;	/* required element of type xsd:string */
	std::string lifeTime;	/* required element of type xsd:integer */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns3__ResourceProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ResourceProperty() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns3__ResourceProperty() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (46)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	_ns3__ServiceFault *ns3__ServiceFault;	/* optional element of type ns3:ServiceFault */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE___ns1__runDeterministicSimulator
#define SOAP_TYPE___ns1__runDeterministicSimulator (53)
/* Operation wrapper: */
struct __ns1__runDeterministicSimulator
{
public:
	_ns2__RunDeterministicSimulator *ns2__RunDeterministicSimulator;	/* optional element of type ns2:RunDeterministicSimulator */
};
#endif

#ifndef SOAP_TYPE___ns1__startDeterministicSimulator
#define SOAP_TYPE___ns1__startDeterministicSimulator (57)
/* Operation wrapper: */
struct __ns1__startDeterministicSimulator
{
public:
	_ns2__StartDeterministicSimulator *ns2__StartDeterministicSimulator;	/* optional element of type ns2:StartDeterministicSimulator */
};
#endif

#ifndef SOAP_TYPE___ns1__getSimulatorStatus
#define SOAP_TYPE___ns1__getSimulatorStatus (61)
/* Operation wrapper: */
struct __ns1__getSimulatorStatus
{
public:
	_ns3__GetSimulatorStatus *ns3__GetSimulatorStatus;	/* optional element of type ns3:GetSimulatorStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__getResult
#define SOAP_TYPE___ns1__getResult (65)
/* Operation wrapper: */
struct __ns1__getResult
{
public:
	_ns3__GetResult *ns3__GetResult;	/* optional element of type ns3:GetResult */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteSimulationResource
#define SOAP_TYPE___ns1__deleteSimulationResource (69)
/* Operation wrapper: */
struct __ns1__deleteSimulationResource
{
public:
	_ns3__DeleteSimulationResource *ns3__DeleteSimulationResource;	/* optional element of type ns3:DeleteSimulationResource */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (70)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (71)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (73)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (74)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (9)
typedef std::string xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (10)
typedef std::string xsd__nonNegativeInteger;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__runDeterministicSimulator(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__RunDeterministicSimulator *ns2__RunDeterministicSimulator, _ns2__RunDeterministicSimulatorResponse *ns2__RunDeterministicSimulatorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startDeterministicSimulator(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__StartDeterministicSimulator *ns2__StartDeterministicSimulator, _ns2__StartDeterministicSimulatorResponse *ns2__StartDeterministicSimulatorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSimulatorStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetSimulatorStatus *ns3__GetSimulatorStatus, _ns3__GetSimulatorStatusResponse *ns3__GetSimulatorStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetResult *ns3__GetResult, _ns3__GetResultResponse *ns3__GetResultResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteSimulationResource(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DeleteSimulationResource *ns3__DeleteSimulationResource, _ns3__DeleteSimulationResourceResponse *ns3__DeleteSimulationResourceResponse);

#endif

/* End of soapStub.h */
